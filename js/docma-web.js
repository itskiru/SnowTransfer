!function(t,e){"function"==typeof define&&define.amd&&!0===define.amd.dust?define("dust.core",[],e):"object"==typeof exports?module.exports=e():t.dust=e()}(this,function(){function getTemplate(t,e){if(t)return"function"==typeof t&&t.template?t.template:dust.isTemplateFn(t)?t:!1!==e?dust.cache[t]:void 0}function load(t,e,n){if(!t)return e.setError(new Error("No template or template name provided to render"));var r=getTemplate(t,dust.config.cache);return r?r(e,Context.wrap(n,r.templateName)):dust.onLoad?e.map(function(e){function r(t,r){var i;if(t)return e.setError(t);if(!(i=getTemplate(r,!1)||getTemplate(o,dust.config.cache))){if(!dust.compile)return e.setError(new Error("Dust compiler not available"));i=dust.loadSource(dust.compile(r,o))}i(e,Context.wrap(n,i.templateName)).end()}var o=t;3===dust.onLoad.length?dust.onLoad(o,n.options,r):dust.onLoad(o,r)}):e.setError(new Error("Template Not Found: "+t))}function Context(t,e,n,r,o){void 0===t||t instanceof Stack||(t=new Stack(t)),this.stack=t,this.global=e,this.options=n,this.blocks=r,this.templateName=o}function getWithResolvedData(t,e,n){return function(r){return t.push(r)._get(e,n)}}function Stack(t,e,n,r){this.tail=e,this.isObject=t&&"object"==typeof t,this.head=t,this.index=n,this.of=r}function Stub(t){this.head=new Chunk(this),this.callback=t,this.out=""}function Stream(){this.head=new Chunk(this)}function Chunk(t,e,n){this.root=t,this.next=e,this.data=[],this.flushable=!1,this.taps=n}function Tap(t,e){this.head=t,this.tail=e}var dust={version:"2.7.2"},ERROR="ERROR",WARN="WARN",INFO="INFO",DEBUG="DEBUG",EMPTY_FUNC=function(){};dust.config={whitespace:!1,amd:!1,cjs:!1,cache:!0},dust._aliases={write:"w",end:"e",map:"m",render:"r",reference:"f",section:"s",exists:"x",notexists:"nx",block:"b",partial:"p",helper:"h"},function(){var t,e,n={DEBUG:0,INFO:1,WARN:2,ERROR:3,NONE:4};"undefined"!=typeof console&&console.log?(t=console.log,e="function"==typeof t?function(){t.apply(console,arguments)}:function(){t(Array.prototype.slice.apply(arguments).join(" "))}):e=EMPTY_FUNC,dust.log=function(t,r){r=r||INFO,n[r]>=n[dust.debugLevel]&&e("[DUST:"+r+"]",t)},dust.debugLevel="NONE","undefined"!=typeof process&&process.env&&/\bdust\b/.test(process.env.DEBUG)&&(dust.debugLevel=DEBUG)}(),dust.helpers={},dust.cache={},dust.register=function(t,e){t&&(e.templateName=t,!1!==dust.config.cache&&(dust.cache[t]=e))},dust.render=function(t,e,n){var r=new Stub(n).head;try{load(t,r,e).end()}catch(t){r.setError(t)}},dust.stream=function(t,e){var n=new Stream,r=n.head;return dust.nextTick(function(){try{load(t,r,e).end()}catch(t){r.setError(t)}}),n},dust.loadSource=function(source){return eval(source)},Array.isArray?dust.isArray=Array.isArray:dust.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)},dust.nextTick=function(){return function(t){setTimeout(t,0)}}(),dust.isEmpty=function(t){return!(0===t||(!dust.isArray(t)||t.length)&&t)},dust.isEmptyObject=function(t){var e;if(null===t)return!1;if(void 0===t)return!1;if(t.length>0)return!1;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0},dust.isTemplateFn=function(t){return"function"==typeof t&&t.__dustBody},dust.isThenable=function(t){return t&&"object"==typeof t&&"function"==typeof t.then},dust.isStreamable=function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pipe},dust.filter=function(t,e,n,r){var o,i,s,u;if(n)for(o=0,i=n.length;o<i;o++)s=n[o],s.length&&(u=dust.filters[s],"s"===s?e=null:"function"==typeof u?t=u(t,r):dust.log("Invalid filter `"+s+"`",WARN));return e&&(t=dust.filters[e](t,r)),t},dust.filters={h:function(t){return dust.escapeHtml(t)},j:function(t){return dust.escapeJs(t)},u:encodeURI,uc:encodeURIComponent,js:function(t){return dust.escapeJSON(t)},jp:function(t){return JSON?JSON.parse(t):(dust.log("JSON is undefined; could not parse `"+t+"`",WARN),t)}},dust.makeBase=dust.context=function(t,e){return new Context(void 0,t,e)},Context.wrap=function(t,e){return t instanceof Context?t:new Context(t,{},{},null,e)},Context.prototype.get=function(t,e){return"string"==typeof t&&("."===t[0]&&(e=!0,t=t.substr(1)),t=t.split(".")),this._get(e,t)},Context.prototype._get=function(t,e){var n,r,o,i,s,u=this.stack||{},a=1;if(r=e[0],o=e.length,t&&0===o)i=u,u=u.head;else{if(t)u&&(u=u.head?u.head[r]:void 0);else{for(;u&&(!u.isObject||(i=u.head,void 0===(n=u.head[r])));)u=u.tail;u=void 0!==n?n:this.global&&this.global[r]}for(;u&&a<o;){if(dust.isThenable(u))return u.then(getWithResolvedData(this,t,e.slice(a)));i=u,u=u[e[a]],a++}}return"function"==typeof u?(s=function(){try{return u.apply(i,arguments)}catch(t){throw dust.log(t,ERROR),t}},s.__dustBody=!!u.__dustBody,s):(void 0===u&&dust.log("Cannot find reference `{"+e.join(".")+"}` in template `"+this.getTemplateName()+"`",INFO),u)},Context.prototype.getPath=function(t,e){return this._get(t,e)},Context.prototype.push=function(t,e,n){return void 0===t?(dust.log("Not pushing an undefined variable onto the context",INFO),this):this.rebase(new Stack(t,this.stack,e,n))},Context.prototype.pop=function(){var t=this.current();return this.stack=this.stack&&this.stack.tail,t},Context.prototype.rebase=function(t){return new Context(t,this.global,this.options,this.blocks,this.getTemplateName())},Context.prototype.clone=function(){var t=this.rebase();return t.stack=this.stack,t},Context.prototype.current=function(){return this.stack&&this.stack.head},Context.prototype.getBlock=function(t){var e,n,r;if("function"==typeof t&&(t=t(new Chunk,this).data.join("")),!(e=this.blocks))return dust.log("No blocks for context `"+t+"` in template `"+this.getTemplateName()+"`",DEBUG),!1;for(n=e.length;n--;)if(r=e[n][t])return r;return dust.log("Malformed template `"+this.getTemplateName()+"` was missing one or more blocks."),!1},Context.prototype.shiftBlocks=function(t){var e,n=this.blocks;return t?(e=n?n.concat([t]):[t],new Context(this.stack,this.global,this.options,e,this.getTemplateName())):this},Context.prototype.resolve=function(t){var e;return"function"!=typeof t?t:(e=(new Chunk).render(t,this),e instanceof Chunk?e.data.join(""):e)},Context.prototype.getTemplateName=function(){return this.templateName},Stub.prototype.flush=function(){for(var t=this.head;t;){if(!t.flushable)return t.error?(this.callback(t.error),dust.log("Rendering failed with error `"+t.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.out+=t.data.join(""),t=t.next,this.head=t}this.callback(null,this.out)},Stream.prototype.flush=function(){for(var t=this.head;t;){if(!t.flushable)return t.error?(this.emit("error",t.error),this.emit("end"),dust.log("Streaming failed with error `"+t.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.emit("data",t.data.join("")),t=t.next,this.head=t}this.emit("end")},Stream.prototype.emit=function(t,e){var n,r,o=this.events||{},i=o[t]||[];if(!i.length)return dust.log("Stream broadcasting, but no listeners for `"+t+"`",DEBUG),!1;for(i=i.slice(0),n=0,r=i.length;n<r;n++)i[n](e);return!0},Stream.prototype.on=function(t,e){var n=this.events=this.events||{},r=n[t]=n[t]||[];return"function"!=typeof e?dust.log("No callback function provided for `"+t+"` event listener",WARN):r.push(e),this},Stream.prototype.pipe=function(t){if("function"!=typeof t.write||"function"!=typeof t.end)return dust.log("Incompatible stream passed to `pipe`",WARN),this;var e=!1;return"function"==typeof t.emit&&t.emit("pipe",this),"function"==typeof t.on&&t.on("error",function(){e=!0}),this.on("data",function(n){if(!e)try{t.write(n,"utf8")}catch(t){dust.log(t,ERROR)}}).on("end",function(){if(!e)try{t.end(),e=!0}catch(t){dust.log(t,ERROR)}})},Chunk.prototype.write=function(t){var e=this.taps;return e&&(t=e.go(t)),this.data.push(t),this},Chunk.prototype.end=function(t){return t&&this.write(t),this.flushable=!0,this.root.flush(),this},Chunk.prototype.map=function(t){var e=new Chunk(this.root,this.next,this.taps),n=new Chunk(this.root,e,this.taps);this.next=n,this.flushable=!0;try{t(n)}catch(t){dust.log(t,ERROR),n.setError(t)}return e},Chunk.prototype.tap=function(t){var e=this.taps;return this.taps=e?e.push(t):new Tap(t),this},Chunk.prototype.untap=function(){return this.taps=this.taps.tail,this},Chunk.prototype.render=function(t,e){return t(this,e)},Chunk.prototype.reference=function(t,e,n,r){return"function"==typeof t?(t=t.apply(e.current(),[this,e,null,{auto:n,filters:r}]),t instanceof Chunk?t:this.reference(t,e,n,r)):dust.isThenable(t)?this.await(t,e,null,n,r):dust.isStreamable(t)?this.stream(t,e,null,n,r):dust.isEmpty(t)?this:this.write(dust.filter(t,n,r,e))},Chunk.prototype.section=function(t,e,n,r){var o,i,s,u=n.block,a=n.else,c=this;if("function"==typeof t&&!dust.isTemplateFn(t)){try{t=t.apply(e.current(),[this,e,n,r])}catch(t){return dust.log(t,ERROR),this.setError(t)}if(t instanceof Chunk)return t}if(dust.isEmptyObject(n))return c;if(dust.isEmptyObject(r)||(e=e.push(r)),dust.isArray(t)){if(u){if((i=t.length)>0){for(s=e.stack&&e.stack.head||{},s.$len=i,o=0;o<i;o++)s.$idx=o,c=u(c,e.push(t[o],o,i));return s.$idx=void 0,s.$len=void 0,c}if(a)return a(this,e)}}else{if(dust.isThenable(t))return this.await(t,e,n);if(dust.isStreamable(t))return this.stream(t,e,n);if(!0===t){if(u)return u(this,e)}else if(t||0===t){if(u)return u(this,e.push(t))}else if(a)return a(this,e)}return dust.log("Section without corresponding key in template `"+e.getTemplateName()+"`",DEBUG),this},Chunk.prototype.exists=function(t,e,n){var r=n.block,o=n.else;if(dust.isEmpty(t)){if(o)return o(this,e)}else{if(r)return r(this,e);dust.log("No block for exists check in template `"+e.getTemplateName()+"`",DEBUG)}return this},Chunk.prototype.notexists=function(t,e,n){var r=n.block,o=n.else;if(dust.isEmpty(t)){if(r)return r(this,e);dust.log("No block for not-exists check in template `"+e.getTemplateName()+"`",DEBUG)}else if(o)return o(this,e);return this},Chunk.prototype.block=function(t,e,n){var r=t||n.block;return r?r(this,e):this},Chunk.prototype.partial=function(t,e,n,r){var o;return void 0===r&&(r=n,n=e),dust.isEmptyObject(r)||(n=n.clone(),o=n.pop(),n=n.push(r).push(o)),dust.isTemplateFn(t)?this.capture(t,e,function(t,e){n.templateName=t,load(t,e,n).end()}):(n.templateName=t,load(t,this,n))},Chunk.prototype.helper=function(t,e,n,r,o){var i,s=this,u=r.filters;if(void 0===o&&(o="h"),!dust.helpers[t])return dust.log("Helper `"+t+"` does not exist",WARN),s;try{return(i=dust.helpers[t](s,e,n,r))instanceof Chunk?i:("string"==typeof u&&(u=u.split("|")),dust.isEmptyObject(n)?s.reference(i,e,o,u):s.section(i,e,n,r))}catch(e){return dust.log("Error in helper `"+t+"`: "+e.message,ERROR),s.setError(e)}},Chunk.prototype.await=function(t,e,n,r,o){return this.map(function(i){t.then(function(t){i=n?i.section(t,e,n):i.reference(t,e,r,o),i.end()},function(t){var r=n&&n.error;r?i.render(r,e.push(t)).end():(dust.log("Unhandled promise rejection in `"+e.getTemplateName()+"`",INFO),i.end())})})},Chunk.prototype.stream=function(t,e,n,r,o){var i=n&&n.block,s=n&&n.error;return this.map(function(u){var a=!1;t.on("data",function(t){a||(i?u=u.map(function(n){n.render(i,e.push(t)).end()}):n||(u=u.reference(t,e,r,o)))}).on("error",function(t){a||(s?u.render(s,e.push(t)):dust.log("Unhandled stream error in `"+e.getTemplateName()+"`",INFO),a||(a=!0,u.end()))}).on("end",function(){a||(a=!0,u.end())})})},Chunk.prototype.capture=function(t,e,n){return this.map(function(r){var o=new Stub(function(t,e){t?r.setError(t):n(e,r)});t(o.head,e).end()})},Chunk.prototype.setError=function(t){return this.error=t,this.root.flush(),this};for(var f in Chunk.prototype)dust._aliases[f]&&(Chunk.prototype[dust._aliases[f]]=Chunk.prototype[f]);Tap.prototype.push=function(t){return new Tap(t,this)},Tap.prototype.go=function(t){for(var e=this;e;)t=e.head(t),e=e.tail;return t};var HCHARS=/[&<>"']/,AMP=/&/g,LT=/</g,GT=/>/g,QUOT=/\"/g,SQUOT=/\'/g;dust.escapeHtml=function(t){return"string"==typeof t||t&&"function"==typeof t.toString?("string"!=typeof t&&(t=t.toString()),HCHARS.test(t)?t.replace(AMP,"&amp;").replace(LT,"&lt;").replace(GT,"&gt;").replace(QUOT,"&quot;").replace(SQUOT,"&#39;"):t):t};var BS=/\\/g,FS=/\//g,CR=/\r/g,LS=/\u2028/g,PS=/\u2029/g,NL=/\n/g,LF=/\f/g,SQ=/'/g,DQ=/"/g,TB=/\t/g;return dust.escapeJs=function(t){return"string"==typeof t?t.replace(BS,"\\\\").replace(FS,"\\/").replace(DQ,'\\"').replace(SQ,"\\'").replace(CR,"\\r").replace(LS,"\\u2028").replace(PS,"\\u2029").replace(NL,"\\n").replace(LF,"\\f").replace(TB,"\\t"):t},dust.escapeJSON=function(t){return JSON?JSON.stringify(t).replace(LS,"\\u2028").replace(PS,"\\u2029").replace(LT,"\\u003c"):(dust.log("JSON is undefined; could not escape `"+t+"`",WARN),t)},dust}),"function"==typeof define&&define.amd&&!0===define.amd.dust&&define(["require","dust.core"],function(t,e){return e.onLoad=function(e,n){t([e],function(){n()})},e});
!function(e,t){"function"==typeof define&&define.amd&&!0===define.amd.dust?define(["dust.core"],t):"object"==typeof exports?module.exports=t(require("dustjs-linkedin")):t(e.dust)}(this,function(e){function t(t,n,r){r=r||"INFO",t=t?"{@"+t+"}: ":"",e.log(t+n,r)}function n(e){l[e]||(t(e,"Deprecation warning: "+e+" is deprecated and will be removed in a future version of dustjs-helpers","WARN"),t(null,"For help and a deprecation timeline, see https://github.com/linkedin/dustjs-helpers/wiki/Deprecated-Features#"+e.replace(/\W+/g,""),"WARN"),l[e]=!0)}function r(e){return e.stack.tail&&e.stack.tail.head&&void 0!==e.stack.tail.head.__select__}function s(e){return r(e)&&e.get("__select__")}function i(e,t){var n,r=e.stack.head,s=e.rebase();e.stack&&e.stack.tail&&(s.stack=e.stack.tail);var i={isPending:!1,isResolved:!1,isDeferredComplete:!1,deferreds:[]};for(n in t)i[n]=t[n];return s.push({__select__:i}).push(r,e.stack.index,e.stack.of)}function o(e){var t,n;if(e.isDeferredPending=!0,e.deferreds.length)for(e.isDeferredComplete=!0,t=0,n=e.deferreds.length;t<n;t++)e.deferreds[t]();e.isDeferredPending=!1}function a(e,t){return"function"==typeof t?t.toString().replace(/(^\s+|\s+$)/gm,"").replace(/\n/gm,"").replace(/,\s*/gm,", ").replace(/\)\{/gm,") {"):t}function c(e,t){return function(n,r,s,i){return u(n,r,s,i,e,t)}}function u(e,n,r,i,o,a){var c,u,l,f,k=r.block,p=r.else,y=s(n)||{};if(y.isResolved&&!y.isDeferredPending)return e;if(i.hasOwnProperty("key"))u=i.key;else{if(!y.hasOwnProperty("key"))return t(o,"No key specified","WARN"),e;u=y.key}return f=i.type||y.type,u=d(n.resolve(u),f),l=d(n.resolve(i.value),f),a(u,l)?(y.isPending||(c=!0,y.isPending=!0),k&&(e=e.render(k,n)),c&&(y.isResolved=!0)):p&&(e=e.render(p,n)),e}function d(e,t){switch(t&&(t=t.toLowerCase()),t){case"number":return+e;case"string":return String(e);case"boolean":return e="false"!==e&&e,Boolean(e);case"date":return new Date(e)}return e}var l={},f={tap:function(e,t,r){return n("tap"),r.resolve(e)},sep:function(e,t,n){var r=n.block;return t.stack.index===t.stack.of-1?e:r?r(e,t):e},first:function(e,t,n){return 0===t.stack.index?n.block(e,t):e},last:function(e,t,n){return t.stack.index===t.stack.of-1?n.block(e,t):e},contextDump:function(e,n,r,s){var i,o,c=n.resolve(s.to),u=n.resolve(s.key);switch(u){case"full":i=n.stack;break;default:i=n.stack.head}switch(o=JSON.stringify(i,a,2),c){case"console":t("contextDump",o);break;default:o=o.replace(/</g,"\\u003c"),e=e.write(o)}return e},math:function(e,n,r,a){var c,u=a.key,d=a.method,l=a.operand,f=a.round;if(!a.hasOwnProperty("key")||!a.method)return t("math","`key` or `method` was not provided","ERROR"),e;switch(u=parseFloat(n.resolve(u)),l=parseFloat(n.resolve(l)),d){case"mod":0===l&&t("math","Division by 0","ERROR"),c=u%l;break;case"add":c=u+l;break;case"subtract":c=u-l;break;case"multiply":c=u*l;break;case"divide":0===l&&t("math","Division by 0","ERROR"),c=u/l;break;case"ceil":case"floor":case"round":case"abs":c=Math[d](u);break;case"toint":c=parseInt(u,10);break;default:t("math","Method `"+d+"` is not supported","ERROR")}return void 0!==c&&(f&&(c=Math.round(c)),r&&r.block?(n=i(n,{key:c}),e=e.render(r.block,n),o(s(n))):e=e.write(c)),e},select:function(e,n,r,a){var c=r.block,u={};return a.hasOwnProperty("key")&&(u.key=n.resolve(a.key)),a.hasOwnProperty("type")&&(u.type=a.type),c?(n=i(n,u),e=e.render(c,n),o(s(n))):t("select","Missing body block","WARN"),e},eq:c("eq",function(e,t){return e===t}),ne:c("ne",function(e,t){return e!==t}),lt:c("lt",function(e,t){return e<t}),lte:c("lte",function(e,t){return e<=t}),gt:c("gt",function(e,t){return e>t}),gte:c("gte",function(e,t){return e>=t}),any:function(e,n,r,i){var o=s(n);return o?o.isDeferredComplete?t("any","Must not be nested inside {@any} or {@none} block","ERROR"):e=e.map(function(e){o.deferreds.push(function(){o.isResolved&&(e=e.render(r.block,n)),e.end()})}):t("any","Must be used inside a {@select} block","ERROR"),e},none:function(e,n,r,i){var o=s(n);return o?o.isDeferredComplete?t("none","Must not be nested inside {@any} or {@none} block","ERROR"):e=e.map(function(e){o.deferreds.push(function(){o.isResolved||(e=e.render(r.block,n)),e.end()})}):t("none","Must be used inside a {@select} block","ERROR"),e},size:function(t,n,r,s){var i,o,a=s.key;if((a=n.resolve(s.key))&&!0!==a)if(e.isArray(a))i=a.length;else if(!isNaN(parseFloat(a))&&isFinite(a))i=a;else if("object"==typeof a){i=0;for(o in a)a.hasOwnProperty(o)&&i++}else i=(a+"").length;else i=0;return t.write(i)}};for(var k in f)e.helpers[k]=f[k];return e});
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.page=e()}}(function(){return function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){var c="function"==typeof require&&require;if(!s&&c)return c(a,!0);if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var f=n[a]={exports:{}};t[a][0].call(f.exports,function(e){var n=t[a][1][e];return i(n||e)},f,f.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){(function(n){"use strict";function r(e,t){if("function"==typeof e)return r("*",e);if("function"==typeof t)for(var n=new s(e),i=1;i<arguments.length;++i)r.callbacks.push(n.middleware(arguments[i]));else"string"==typeof e?r["string"==typeof t?"redirect":"show"](e,t):r.start(e)}function i(e){if(!e.handled){var t;t=y?g+v.hash.replace("#!",""):v.pathname+v.search,t!==e.canonicalPath&&(r.stop(),e.handled=!1,v.href=e.canonicalPath)}}function o(e){return"string"!=typeof e?e:m?decodeURIComponent(e.replace(/\+/g," ")):e}function a(e,t){"/"===e[0]&&0!==e.indexOf(g)&&(e=g+(y?"#!":"")+e);var n=e.indexOf("?");if(this.canonicalPath=e,this.path=e.replace(g,"")||"/",y&&(this.path=this.path.replace("#!","")||"/"),this.title=document.title,this.state=t||{},this.state.path=e,this.querystring=~n?o(e.slice(n+1)):"",this.pathname=o(~n?e.slice(0,n):e),this.params={},this.hash="",!y){if(!~this.path.indexOf("#"))return;var r=this.path.split("#");this.path=r[0],this.hash=o(r[1])||"",this.querystring=this.querystring.split("#")[0]}}function s(e,t){t=t||{},this.path="*"===e?"(.*)":e,this.method="GET",this.regexp=p(this.path,this.keys=[],t)}function c(e){if(1===u(e)&&!(e.metaKey||e.ctrlKey||e.shiftKey||e.defaultPrevented)){for(var t=e.path?e.path[0]:e.target;t&&"A"!==t.nodeName;)t=t.parentNode;if(t&&"A"===t.nodeName&&!t.hasAttribute("download")&&"external"!==t.getAttribute("rel")){var i=t.getAttribute("href");if((y||t.pathname!==v.pathname||!t.hash&&"#"!==i)&&!(i&&i.indexOf("mailto:")>-1)&&!t.target&&f(t.href)){var o=t.pathname+t.search+(t.hash||"");void 0!==n&&o.match(/^\/[a-zA-Z]:\//)&&(o=o.replace(/^\/[a-zA-Z]:\//,"/"));var a=o;0===o.indexOf(g)&&(o=o.substr(g.length)),y&&(o=o.replace("#!","")),g&&a===o||(e.preventDefault(),r.show(a))}}}}function u(e){return e=e||window.event,null===e.which?e.button:e.which}function f(e){var t=v.protocol+"//"+v.hostname;return v.port&&(t+=":"+v.port),e&&0===e.indexOf(t)}var p=e("path-to-regexp");t.exports=r;var h,d,l="undefined"!=typeof document&&document.ontouchstart?"touchstart":"click",v="undefined"!=typeof window&&(window.history.location||window.location),w=!0,m=!0,g="",y=!1;r.callbacks=[],r.exits=[],r.current="",r.len=0,r.base=function(e){if(0===arguments.length)return g;g=e},r.start=function(e){if(e=e||{},!h&&(h=!0,!1===e.dispatch&&(w=!1),!1===e.decodeURLComponents&&(m=!1),!1!==e.popstate&&window.addEventListener("popstate",x,!1),!1!==e.click&&document.addEventListener(l,c,!1),!0===e.hashbang&&(y=!0),w)){var t=y&&~v.hash.indexOf("#!")?v.hash.substr(2)+v.search:v.pathname+v.search+v.hash;r.replace(t,null,!0,w)}},r.stop=function(){h&&(r.current="",r.len=0,h=!1,document.removeEventListener(l,c,!1),window.removeEventListener("popstate",x,!1))},r.show=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,!1!==n&&r.dispatch(o),!1!==o.handled&&!1!==i&&o.pushState(),o},r.back=function(e,t){r.len>0?(history.back(),r.len--):e?setTimeout(function(){r.show(e,t)}):setTimeout(function(){r.show(g,t)})},r.redirect=function(e,t){"string"==typeof e&&"string"==typeof t&&r(e,function(e){setTimeout(function(){r.replace(t)},0)}),"string"==typeof e&&void 0===t&&setTimeout(function(){r.replace(e)},0)},r.replace=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,o.init=n,o.save(),!1!==i&&r.dispatch(o),o},r.dispatch=function(e){function t(){var e=r.exits[s++];if(!e)return n();e(o,t)}function n(){var t=r.callbacks[a++];return e.path!==r.current?void(e.handled=!1):t?void t(e,n):i(e)}var o=d,a=0,s=0;d=e,o?t():n()},r.exit=function(e,t){if("function"==typeof e)return r.exit("*",e);for(var n=new s(e),i=1;i<arguments.length;++i)r.exits.push(n.middleware(arguments[i]))},r.Context=a,a.prototype.pushState=function(){r.len++,history.pushState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},a.prototype.save=function(){history.replaceState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},r.Route=s,s.prototype.middleware=function(e){var t=this;return function(n,r){if(t.match(n.path,n.params))return e(n,r);r()}},s.prototype.match=function(e,t){var n=this.keys,r=e.indexOf("?"),i=~r?e.slice(0,r):e,a=this.regexp.exec(decodeURIComponent(i));if(!a)return!1;for(var s=1,c=a.length;s<c;++s){var u=n[s-1],f=o(a[s]);void 0===f&&hasOwnProperty.call(t,u.name)||(t[u.name]=f)}return!0};var x=function(){var e=!1;if("undefined"!=typeof window)return"complete"===document.readyState?e=!0:window.addEventListener("load",function(){setTimeout(function(){e=!0},0)}),function(t){if(e)if(t.state){var n=t.state.path;r.replace(n,t.state)}else r.show(v.pathname+v.hash,void 0,void 0,!1)}}();r.sameOrigin=f}).call(this,e("_process"))},{_process:2,"path-to-regexp":3}],2:[function(e,t,n){function r(){}var i=t.exports={};i.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,t="undefined"!=typeof window&&window.MutationObserver,n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};var r=[];if(t){var i=document.createElement("div");return new MutationObserver(function(){var e=r.slice();r.length=0,e.forEach(function(e){e()})}).observe(i,{attributes:!0}),function(e){r.length||i.setAttribute("yes","no"),r.push(e)}}return n?(window.addEventListener("message",function(e){var t=e.source;if((t===window||null===t)&&"process-tick"===e.data&&(e.stopPropagation(),r.length>0)){r.shift()()}},!0),function(e){r.push(e),window.postMessage("process-tick","*")}):function(e){setTimeout(e,0)}}(),i.title="browser",i.browser=!0,i.env={},i.argv=[],i.on=r,i.addListener=r,i.once=r,i.off=r,i.removeListener=r,i.removeAllListeners=r,i.emit=r,i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")}},{}],3:[function(e,t,n){function r(e){for(var t,n=[],r=0,i=0,o="";null!=(t=w.exec(e));){var a=t[0],c=t[1],u=t.index;if(o+=e.slice(i,u),i=u+a.length,c)o+=c[1];else{o&&(n.push(o),o="");var f=t[2],p=t[3],h=t[4],d=t[5],l=t[6],v=t[7],m="+"===l||"*"===l,g="?"===l||"*"===l,y=f||"/",x=h||d||(v?".*":"[^"+y+"]+?");n.push({name:p||r++,prefix:f||"",delimiter:y,optional:g,repeat:m,pattern:s(x)})}}return i<e.length&&(o+=e.substr(i)),o&&n.push(o),n}function i(e){return o(r(e))}function o(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^"+e[n].pattern+"$"));return function(n){for(var r="",i=n||{},o=0;o<e.length;o++){var a=e[o];if("string"!=typeof a){var s,c=i[a.name];if(null==c){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to be defined')}if(v(c)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but received "'+c+'"');if(0===c.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var u=0;u<c.length;u++){if(s=encodeURIComponent(c[u]),!t[o].test(s))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=(0===u?a.prefix:a.delimiter)+s}}else{if(s=encodeURIComponent(c),!t[o].test(s))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=a.prefix+s}}else r+=a}return r}}function a(e){return e.replace(/([.+*?=^!:${}()[\]|\/])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function u(e){return e.sensitive?"":"i"}function f(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return c(e,t)}function p(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(l(e[i],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",u(n)),t)}function h(e,t,n){for(var i=r(e),o=d(i,n),a=0;a<i.length;a++)"string"!=typeof i[a]&&t.push(i[a]);return c(o,t)}function d(e,t){t=t||{};for(var n=t.strict,r=!1!==t.end,i="",o=e[e.length-1],s="string"==typeof o&&/\/$/.test(o),c=0;c<e.length;c++){var f=e[c];if("string"==typeof f)i+=a(f);else{var p=a(f.prefix),h=f.pattern;f.repeat&&(h+="(?:"+p+h+")*"),h=f.optional?p?"(?:"+p+"("+h+"))?":"("+h+")?":p+"("+h+")",i+=h}}return n||(i=(s?i.slice(0,-2):i)+"(?:\\/(?=$))?"),i+=r?"$":n&&s?"":"(?=\\/|$)",new RegExp("^"+i,u(t))}function l(e,t,n){return t=t||[],v(t)?n||(n={}):(n=t,t=[]),e instanceof RegExp?f(e,t,n):v(e)?p(e,t,n):h(e,t,n)}var v=e("isarray");t.exports=l,t.exports.parse=r,t.exports.compile=i,t.exports.tokensToFunction=o,t.exports.tokensToRegExp=d;var w=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))"].join("|"),"g")},{isarray:4}],4:[function(e,t,n){t.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},{}]},{},[1])(1)});
(function(){"use strict";function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var r=e.prototype,i=this,s=i.EventEmitter;r.getListeners=function(e){var t,n,r=this._getEvents();if(e instanceof RegExp){t={};for(n in r)r.hasOwnProperty(n)&&e.test(n)&&(t[n]=r[n])}else t=r[e]||(r[e]=[]);return t},r.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},r.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},r.addListener=function(e,n){var r,i=this.getListenersAsObject(e),s="object"==typeof n;for(r in i)i.hasOwnProperty(r)&&-1===t(i[r],n)&&i[r].push(s?n:{listener:n,once:!1});return this},r.on=n("addListener"),r.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},r.once=n("addOnceListener"),r.defineEvent=function(e){return this.getListeners(e),this},r.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},r.removeListener=function(e,n){var r,i,s=this.getListenersAsObject(e);for(i in s)s.hasOwnProperty(i)&&-1!==(r=t(s[i],n))&&s[i].splice(r,1);return this},r.off=n("removeListener"),r.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},r.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},r.manipulateListeners=function(e,t,n){var r,i,s=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(r=n.length;r--;)s.call(this,t,n[r]);else for(r in t)t.hasOwnProperty(r)&&(i=t[r])&&("function"==typeof i?s.call(this,r,i):o.call(this,r,i));return this},r.removeEvent=function(e){var t,n=typeof e,r=this._getEvents();if("string"===n)delete r[e];else if(e instanceof RegExp)for(t in r)r.hasOwnProperty(t)&&e.test(t)&&delete r[t];else delete this._events;return this},r.removeAllListeners=n("removeEvent"),r.emitEvent=function(e,t){var n,r,i,s,o=this.getListenersAsObject(e);for(s in o)if(o.hasOwnProperty(s))for(n=o[s].slice(0),i=0;i<n.length;i++)r=n[i],!0===r.once&&this.removeListener(e,r.listener),r.listener.apply(this,t||[])===this._getOnceReturnValue()&&this.removeListener(e,r.listener);return this},r.trigger=n("emitEvent"),r.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},r.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},r._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},r._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return i.EventEmitter=s,e},"function"==typeof define&&define.amd?define(function(){return e}):"object"==typeof module&&module.exports?module.exports=e:i.EventEmitter=e}).call(this);
/* docma (dust) compiled templates */
(function(dust){dust.register("docma-404",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><br /><br /><h1>404</h1><hr /><h3>Page Not Found</h3><br />The file or page you have requested is not found. &nbsp;&nbsp;<br />Please make sure page address is entered correctly.</div></div><br /><br /><br /></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-api",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{}).x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_1},{}).w("<div id=\"wrapper\">").x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_2},{}).w("<div id=\"page-content-wrapper\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-lg-12\">").s(ctx.get(["documentation"], false),ctx,{"block":body_3},{}).w("</div></div><br /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-toggle\"><span class=\"glyphicon glyphicon-menu-hamburger\"></span></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div id=\"sidebar-wrapper\">").p("sidebar",ctx,ctx,{}).w("</div>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-content",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><div id=\"docma-content\"></div></div></div><br /><hr /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("enums",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["$members"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Enumeration</th><th>Type</th><th>Value</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["$members"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.getPath(true, []),ctx,"h",["$longname","s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$val"]).w("</code></td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navbar",body_0);function body_0(chk,ctx){return chk.x(ctx.getPath(false, ["template","options","navbar"]),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<nav class=\"navbar navbar-default navbar-fixed-top\"><div class=\"").x(ctx.get(["boxed"], false),ctx,{"else":body_2,"block":body_3},{}).w("\"><div class=\"nav navbar-left nav-left\"><div class=\"navbar-brand\"><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></div></div>").h("gt",ctx,{"block":body_4},{"key":ctx.getPath(false, ["template","options","navItems","length"]),"value":0},"h").w("</div></nav>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("container-fluid");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("container container-boxed");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<ul class=\"nav navbar-nav\">").s(ctx.getPath(false, ["template","options","navItems"]),ctx,{"block":body_5},{}).w("</ul>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.x(ctx.get(["items"], false),ctx,{"else":body_6,"block":body_7},{});}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<li class=\"dropdown\"><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_8,"block":body_9},{}).w("\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;").f(ctx.get(["label"], false),ctx,"h").w("&nbsp;<span class=\"caret\"></span></a><ul class=\"dropdown-menu\">").s(ctx.get(["items"], false),ctx,{"block":body_10},{}).w("</ul></li>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("#");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_10.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navitem",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["separator"], false),ctx,{"else":body_1,"block":body_5},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<li><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_2,"block":body_3},{}).w("\" target=\"").f(ctx.get(["target"], false),ctx,"h").w("\">").x(ctx.get(["iconClass"], false),ctx,{"block":body_4},{}).f(ctx.get(["label"], false),ctx,"h",["s"]).w("</a></li>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("#");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<li role=\"separator\" class=\"divider\"></li>");}body_5.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("params",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["params"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["params"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").x(ctx.get(["optional"], false),ctx,{"block":body_3},{}).w("</td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$param_desc"]).w("</td></tr>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<code>").f(ctx.getPath(true, []),ctx,"h",["$def"]).w("</code>");}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("properties",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["properties"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["properties"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").f(ctx.get(["description"], false),ctx,"h",["s","$p"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("sidebar",body_0);function body_0(chk,ctx){return chk.w("<div class=\"sidebar-header\"><div class=\"sidebar-title\"><span><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></span></div>").x(ctx.getPath(false, ["template","options","search"]),ctx,{"block":body_1},{}).w("</div><div class=\"sidebar-nav-container\"><ul class=\"sidebar-nav\">").s(ctx.get(["symbols"], false),ctx,{"block":body_2},{}).w("</ul><div class=\"sidebar-nav-space\"></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-search\"><input id=\"txt-search\" type=\"search\" class=\"form-control\" placeholder=\"Search...\" /><div class=\"sidebar-search-clean\"><span class=\"glyphicon glyphicon-remove-circle\"></span></div></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$menuitem"]).w("</li>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("symbol",body_0);function body_0(chk,ctx){return chk.w("<div id=\"").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\" class=\"symbol-container\"><div class=\"symbol-heading\"><div class=\"symbol\"><a href=\"#").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\"><span class=\"glyphicon glyphicon-link color-gray-light\" aria-hidden=\"true\"></span><code class=\"symbol-name\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$longname_params"]).w("</code><span class=\"symbol-sep\">").f(ctx.get(["symbol"], false),ctx,"h",["$type_sep"]).w("</span><code class=\"symbol-type\">").f(ctx.get(["symbol"], false),ctx,"h",["$type"]).w("</code></a>").f(ctx.get(["symbol"], false),ctx,"h",["s","$tags"]).w("</div>").x(ctx.getPath(false, ["symbol","augments"]),ctx,{"block":body_1},{}).x(ctx.getPath(false, ["symbol","alias"]),ctx,{"block":body_2},{}).w("</div><div class=\"symbol-definition\">").x(ctx.getPath(false, ["symbol","classdesc"]),ctx,{"block":body_3},{}).f(ctx.get(["symbol"], false),ctx,"h",["s","$desc"]).x(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_8},{}).h("eq",ctx,{"else":body_13,"block":body_16},{"key":ctx.getPath(false, ["symbol","meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.getPath(false, ["symbol","returns"]),ctx,{"block":body_17},{}).x(ctx.getPath(false, ["symbol","exceptions"]),ctx,{"block":body_20},{}).x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"block":body_23},{}).x(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_24},{}).x(ctx.getPath(false, ["template","options","symbolMeta"]),ctx,{"block":body_26},{}).w("</div></div><hr />").h("eq",ctx,{"block":body_30},{"key":ctx.getPath(false, ["symbol","meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"else":body_32,"block":body_34},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Extends:</b> ").f(ctx.get(["symbol"], false),ctx,"h",["s","$extends"]).w("</p>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Alias:</b> <code>").f(ctx.getPath(false, ["symbol","alias"]),ctx,"h",["s","$dot_prop"]).w("</code></p>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<table>").x(ctx.getPath(false, ["symbol","version"]),ctx,{"block":body_4},{}).x(ctx.getPath(false, ["symbol","copyright"]),ctx,{"block":body_5},{}).x(ctx.getPath(false, ["symbol","author"]),ctx,{"block":body_6},{}).x(ctx.getPath(false, ["symbol","license"]),ctx,{"block":body_7},{}).w("</table><br />");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<tr><td><b>Version:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","version"]),ctx,"h",["s"]).w("</td></tr>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<tr><td><b>Copyright:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","copyright"]),ctx,"h",["s"]).w("</td></tr>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<tr><td><b>Author:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","author"]),ctx,"h",["s","$author"]).w("</td></tr>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<tr><td><b>License:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","license"]),ctx,"h",["s"]).w("</td></tr>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("<p><b>See</b>").h("gt",ctx,{"else":body_9,"block":body_11},{"key":ctx.getPath(false, ["symbol","see","length"]),"value":1},"h").w("</p><br />");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_10},{});}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]);}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.w("<ul>").s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_12},{}).w("</ul>");}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]).w("</li>");}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.p("params",ctx,ctx.rebase(ctx.get(["symbol"], false)),{}).x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"else":body_14,"block":body_15},{});}body_13.__dustBody=!0;function body_14(chk,ctx){return chk.p("properties",ctx,ctx.rebase(ctx.get(["symbol"], false)),{});}body_14.__dustBody=!0;function body_15(chk,ctx){return chk;}body_15.__dustBody=!0;function body_16(chk,ctx){return chk;}body_16.__dustBody=!0;function body_17(chk,ctx){return chk.h("gt",ctx,{"else":body_18,"block":body_19},{"key":ctx.getPath(false, ["symbol","returns","length"]),"value":"1","type":"number"},"h");}body_17.__dustBody=!0;function body_18(chk,ctx){return chk.w("<p><b>Returns:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_18.__dustBody=!0;function body_19(chk,ctx){return chk.w("<b>Returns:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_19.__dustBody=!0;function body_20(chk,ctx){return chk.h("gt",ctx,{"else":body_21,"block":body_22},{"key":ctx.getPath(false, ["symbol","exceptions","length"]),"value":"1","type":"number"},"h");}body_20.__dustBody=!0;function body_21(chk,ctx){return chk.w("<p><b>Throws:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_21.__dustBody=!0;function body_22(chk,ctx){return chk.w("<b>Throws:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_22.__dustBody=!0;function body_23(chk,ctx){return chk.p("enums",ctx,ctx.rebase(ctx.get(["symbol"], false)),{});}body_23.__dustBody=!0;function body_24(chk,ctx){return chk.w("<p><b>Example</b></p>").s(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_25},{});}body_24.__dustBody=!0;function body_25(chk,ctx){return chk.w("<pre><code>").f(ctx.getPath(true, []),ctx,"h",["$nt"]).w("</code></pre>");}body_25.__dustBody=!0;function body_26(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_27},{});}body_26.__dustBody=!0;function body_27(chk,ctx){return chk.w("<p class=\"symbol-meta\">").x(ctx.getPath(false, ["symbol","meta","filename"]),ctx,{"block":body_28},{}).x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_29},{}).w("</p>");}body_27.__dustBody=!0;function body_28(chk,ctx){return chk.w("<b>File:</b> ").f(ctx.getPath(false, ["symbol","meta","filename"]),ctx,"h").w("&nbsp;&nbsp;");}body_28.__dustBody=!0;function body_29(chk,ctx){return chk.w("<b>Line:</b> ").f(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,"h").w("&nbsp;&nbsp;");}body_29.__dustBody=!0;function body_30(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","$constructor"]),ctx,{"block":body_31},{});}body_30.__dustBody=!0;function body_31(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(false, ["symbol","$constructor"]),"template":ctx.get(["template"], false)});}body_31.__dustBody=!0;function body_32(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","$members"]),ctx,{"block":body_33},{});}body_32.__dustBody=!0;function body_33(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_33.__dustBody=!0;function body_34(chk,ctx){return chk;}body_34.__dustBody=!0;return body_0}(dust));
/*!
 * Docma (Web) Core
 * https://github.com/onury/docma
 * @license MIT
 */
var docma = {"routes":[{"id":"api:","type":"api","name":"_def_","path":"/?api","contentPath":null},{"id":"api:SnowTransfer","type":"api","name":"SnowTransfer","path":"/?api=SnowTransfer","contentPath":null},{"id":"api:AuditLog","type":"api","name":"AuditLog","path":"/?api=AuditLog","contentPath":null},{"id":"api:Bots","type":"api","name":"Bots","path":"/?api=Bots","contentPath":null},{"id":"api:Channels","type":"api","name":"Channels","path":"/?api=Channels","contentPath":null},{"id":"api:Emojis","type":"api","name":"Emojis","path":"/?api=Emojis","contentPath":null},{"id":"api:Guilds","type":"api","name":"Guilds","path":"/?api=Guilds","contentPath":null},{"id":"api:Invites","type":"api","name":"Invites","path":"/?api=Invites","contentPath":null},{"id":"api:Users","type":"api","name":"Users","path":"/?api=Users","contentPath":null},{"id":"api:Voices","type":"api","name":"Voices","path":"/?api=Voices","contentPath":null},{"id":"api:Webhooks","type":"api","name":"Webhooks","path":"/?api=Webhooks","contentPath":null},{"id":"content:index","type":"content","name":"index","path":"/?content=index","contentPath":"content/index.html"}],"apis":{"_def_":{"documentation":[],"symbols":[]},"SnowTransfer":{"documentation":[{"comment":"/**\n     * Create a new Rest Client\n     * @property {ChannelMethods} channel - Methods for channels\n     * @property {UserMethods} user - Methods for users\n     * @property {EmojiMethods} emoji - Methods for emojis\n     * @property {WebhookMethods} webhook - Methods for webhooks\n     * @property {GuildMethods} guild - Methods for guilds\n     * @property {InviteMethods} invite - Methods for invites\n     * @property {VoiceMethods} voice - Methods for voice\n     * @property {BotMethods} bot - Methods for bot related things (e.g. Gateway endpoint)\n     * @property {AuditLogMethods} auditLog - Methods for accessing the audit log of a guild\n     * @property {Raven|null} [raven] - optional [sentry raven](https://docs.sentry.io/clients/node/config/) instance used for catching errors\n     * @param {String} token - Discord Bot token to use\n     * @param {Object} [options] - options\n     * @param {String} [options.sentryDsn] - Dsn to use for the sentry integration, disables the integration when empty\n     * @param {Object} [options.sentryOptions] - Options to use for the sentry client, check the [sentry docs](https://docs.sentry.io/clients/node/config/) for more infos\n     * @param {String} [options.baseHost=https://discordapp.com] - Base host to use for the requests, may be replaced when using a local hosted proxy\n     * @return {SnowTransfer} - created instance\n     * @constructor\n     */","meta":{"range":[2091,3469],"filename":"SnowTransfer.js","lineno":37,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src","code":{"id":"astnode100001980","name":"SnowTransfer","type":"MethodDefinition","paramnames":["token","options"]},"vars":{"":null}},"description":"<p>Create a new Rest Client</p>","properties":[{"type":{"names":["ChannelMethods"]},"description":"<p>Methods for channels</p>","name":"channel"},{"type":{"names":["UserMethods"]},"description":"<p>Methods for users</p>","name":"user"},{"type":{"names":["EmojiMethods"]},"description":"<p>Methods for emojis</p>","name":"emoji"},{"type":{"names":["WebhookMethods"]},"description":"<p>Methods for webhooks</p>","name":"webhook"},{"type":{"names":["GuildMethods"]},"description":"<p>Methods for guilds</p>","name":"guild"},{"type":{"names":["InviteMethods"]},"description":"<p>Methods for invites</p>","name":"invite"},{"type":{"names":["VoiceMethods"]},"description":"<p>Methods for voice</p>","name":"voice"},{"type":{"names":["BotMethods"]},"description":"<p>Methods for bot related things (e.g. Gateway endpoint)</p>","name":"bot"},{"type":{"names":["AuditLogMethods"]},"description":"<p>Methods for accessing the audit log of a guild</p>","name":"auditLog"},{"type":{"names":["Raven","null"]},"optional":true,"description":"<p>optional <a href=\"https://docs.sentry.io/clients/node/config/\">sentry raven</a> instance used for catching errors</p>","name":"raven"}],"params":[{"type":{"names":["String"]},"description":"<p>Discord Bot token to use</p>","name":"token"},{"type":{"names":["Object"]},"optional":true,"description":"<p>options</p>","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"<p>Dsn to use for the sentry integration, disables the integration when empty</p>","name":"options.sentryDsn"},{"type":{"names":["Object"]},"optional":true,"description":"<p>Options to use for the sentry client, check the <a href=\"https://docs.sentry.io/clients/node/config/\">sentry docs</a> for more infos</p>","name":"options.sentryOptions"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"https://discordapp.com","description":"<p>Base host to use for the requests, may be replaced when using a local hosted proxy</p>","name":"options.baseHost"}],"returns":[{"type":{"names":["SnowTransfer"]},"description":"<ul>\n<li>created instance</li>\n</ul>"}],"kind":"class","name":"SnowTransfer","longname":"SnowTransfer","scope":"global","$longname":"SnowTransfer"}],"symbols":["SnowTransfer"]},"AuditLog":{"documentation":[{"comment":"/**\n * @typedef {Object} AuditLogChange\n * @description A single audit log change object\n * @property {String|Number|Boolean|Role[]|PermissionOverwrite[]} new_value - new value of the key\n * @property {String|Number|Boolean|Role[]|PermissionOverwrite[]} old_value - old value of the key\n * @property {String} key - type of [audit log change key](https://discordapp.com/developers/docs/resources/audit-log#audit-log-change-object-audit-log-change-key)\n * @type {AuditLogMethods}\n */","meta":{"filename":"AuditLog.js","lineno":55,"columnno":0,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{}},"kind":"typedef","name":"AuditLogChange","type":{"names":["Object"]},"description":"<p>A single audit log change object</p>","properties":[{"type":{"names":["String","Number","Boolean","Array.<Role>","Array.<PermissionOverwrite>"]},"description":"<p>new value of the key</p>","name":"new_value"},{"type":{"names":["String","Number","Boolean","Array.<Role>","Array.<PermissionOverwrite>"]},"description":"<p>old value of the key</p>","name":"old_value"},{"type":{"names":["String"]},"description":"<p>type of <a href=\"https://discordapp.com/developers/docs/resources/audit-log#audit-log-change-object-audit-log-change-key\">audit log change key</a></p>","name":"key"}],"longname":"AuditLogChange","scope":"global","$longname":"AuditLogChange"},{"comment":"/**\n * @typedef {Object} AuditLogEntry\n * @description A single audit log entry object\n * @property {String} target_id - id of the affected entity (webhook, user, role, etc...)\n * @property {AuditLogChange[]} changes - array of changes made to the target_id\n * @property {String} user_id - id of the user who made the changes\n * @property {String} id - id of the entry\n * @property {Number} action_type - [type](https://discordapp.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events) of the action\n * @property {Object} options - [additional info](https://discordapp.com/developers/docs/resources/audit-log#audit-log-entry-object-optional-audit-entry-info) for some action types\n * @property {String} reason - reason for the change\n */","meta":{"filename":"AuditLog.js","lineno":43,"columnno":0,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{}},"kind":"typedef","name":"AuditLogEntry","type":{"names":["Object"]},"description":"<p>A single audit log entry object</p>","properties":[{"type":{"names":["String"]},"description":"<p>id of the affected entity (webhook, user, role, etc...)</p>","name":"target_id"},{"type":{"names":["Array.<AuditLogChange>"]},"description":"<p>array of changes made to the target_id</p>","name":"changes"},{"type":{"names":["String"]},"description":"<p>id of the user who made the changes</p>","name":"user_id"},{"type":{"names":["String"]},"description":"<p>id of the entry</p>","name":"id"},{"type":{"names":["Number"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events\">type</a> of the action</p>","name":"action_type"},{"type":{"names":["Object"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/audit-log#audit-log-entry-object-optional-audit-entry-info\">additional info</a> for some action types</p>","name":"options"},{"type":{"names":["String"]},"description":"<p>reason for the change</p>","name":"reason"}],"longname":"AuditLogEntry","scope":"global","$longname":"AuditLogEntry"},{"comment":"/**\n     * Create a new Audit Log Method Handler\n     *\n     * Usually SnowTransfer creates a method handler for you, this is here for completion\n     *\n     * You can access the methods listed via `client.auditLog.method`, where `client` is an initialized SnowTransfer instance\n     * @param {RequestHandler} requestHandler - request handler that calls the rest api\n     */","meta":{"range":[451,532],"filename":"AuditLog.js","lineno":12,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000011","name":"AuditLogMethods","type":"MethodDefinition","paramnames":["requestHandler"]},"vars":{"":null}},"description":"<p>Create a new Audit Log Method Handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.auditLog.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"name":"AuditLogMethods","longname":"AuditLogMethods","kind":"class","scope":"global","$longname":"AuditLogMethods","$members":[{"comment":"/**\n     * Get the audit logs of the specified guild id\n     * @param {String} guildId - id of a guild\n     * @param {Object} [data] - optional audit log filter values\n     * @param {String} [data.user_id] - Filter the audit log with the id of a user\n     * @param {Number} [data.action_type] - [Type](https://discordapp.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events) of the audit log event\n     * @param {String} [data.before] - Filter the audit log before a certain entry id\n     * @param {Number} [data.limit=50] - How many entries are returned (min 1, max 100)\n     * @returns {Promise.<AuditLogObject>} - An object with audit log data\n     *\n     * | Permissions needed |\n     |--------------------|\n     | VIEW_AUDIT_LOG   |\n     */","meta":{"range":[1315,1457],"filename":"AuditLog.js","lineno":30,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000022","name":"AuditLogMethods#getAuditLog","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Get the audit logs of the specified guild id</p>","params":[{"type":{"names":["String"]},"description":"<p>id of a guild</p>","name":"guildId"},{"type":{"names":["Object"]},"optional":true,"description":"<p>optional audit log filter values</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>Filter the audit log with the id of a user</p>","name":"data.user_id"},{"type":{"names":["Number"]},"optional":true,"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events\">Type</a> of the audit log event</p>","name":"data.action_type"},{"type":{"names":["String"]},"optional":true,"description":"<p>Filter the audit log before a certain entry id</p>","name":"data.before"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":50,"description":"<p>How many entries are returned (min 1, max 100)</p>","name":"data.limit"}],"returns":[{"type":{"names":["Promise.<AuditLogObject>"]},"description":"<ul>\n<li>An object with audit log data</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VIEW_AUDIT_LOG</td>\n</tr>\n</tbody>\n</table>"}],"name":"getAuditLog","longname":"AuditLogMethods#getAuditLog","kind":"function","memberof":"AuditLogMethods","scope":"instance","async":true,"$longname":"AuditLogMethods#getAuditLog"}]},{"comment":"/**\n * @typedef {Object} AuditLogObject\n * @description Audit Log Object\n * @property {Webhook[]} webhooks - list of [webhooks](https://discordapp.com/developers/docs/resources/webhook#webhook-object-webhook-structure) found in the audit log\n * @property {User[]} users - list of [users](https://discordapp.com/developers/docs/resources/user#user-object) found in the audit log\n * @property {AuditLogEntry[]} audit_log_entries - list of [audit log entries](https://discordapp.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-entry-structure)\n */","meta":{"filename":"AuditLog.js","lineno":35,"columnno":0,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{}},"kind":"typedef","name":"AuditLogObject","type":{"names":["Object"]},"description":"<p>Audit Log Object</p>","properties":[{"type":{"names":["Array.<Webhook>"]},"description":"<p>list of <a href=\"https://discordapp.com/developers/docs/resources/webhook#webhook-object-webhook-structure\">webhooks</a> found in the audit log</p>","name":"webhooks"},{"type":{"names":["Array.<User>"]},"description":"<p>list of <a href=\"https://discordapp.com/developers/docs/resources/user#user-object\">users</a> found in the audit log</p>","name":"users"},{"type":{"names":["Array.<AuditLogEntry>"]},"description":"<p>list of <a href=\"https://discordapp.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-entry-structure\">audit log entries</a></p>","name":"audit_log_entries"}],"longname":"AuditLogObject","scope":"global","$longname":"AuditLogObject"}],"symbols":["AuditLogChange","AuditLogEntry","AuditLogMethods","AuditLogMethods#getAuditLog","AuditLogObject"]},"Bots":{"documentation":[{"comment":"/**\n * Methods for interacting with bot specific endpoints\n */","meta":{"range":[107,1626],"filename":"Bots.js","lineno":6,"columnno":0,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000008","name":"BotMethods","type":"ClassDeclaration","paramnames":["requestHandler"]}},"classdesc":"<p>Methods for interacting with bot specific endpoints</p>","name":"BotMethods","longname":"BotMethods","kind":"class","scope":"global","description":"<p>Create a new Bot Method Handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.bot.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"$longname":"BotMethods","$members":[{"comment":"/**\n     * Get the gateway url to connect to\n     * @returns  {Promise.<GatewayData>} [Gateway data](https://discordapp.com/developers/docs/topics/gateway#get-gateway-example-response)\n     * @example\n     * let client = new SnowTransfer('TOKEN');\n     * let result = await client.bot.getGateway();\n     * // result should be something like {\"url\": \"wss://gateway.discord.gg\"}\n     */","meta":{"range":[972,1070],"filename":"Bots.js","lineno":27,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000022","name":"BotMethods#getGateway","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Get the gateway url to connect to</p>","returns":[{"type":{"names":["Promise.<GatewayData>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/topics/gateway#get-gateway-example-response\">Gateway data</a></p>"}],"examples":["let client = new SnowTransfer('TOKEN');\nlet result = await client.bot.getGateway();\n// result should be something like {\"url\": \"wss://gateway.discord.gg\"}"],"name":"getGateway","longname":"BotMethods#getGateway","kind":"function","memberof":"BotMethods","scope":"instance","params":[],"$longname":"BotMethods#getGateway"},{"comment":"/**\n     * Get the gateway url to connect to and a recommended amount of shards to use\n     * @returns {Promise.<GatewayData>} [Gateway data](https://discordapp.com/developers/docs/topics/gateway#get-gateway-example-response)\n     * @example\n     * let client = new SnowTransfer('TOKEN');\n     * let result = await client.bot.getGateway();\n     * // result should be something like {\"url\": \"wss://gateway.discord.gg\", \"shards\": 1}\n     */","meta":{"range":[1519,1624],"filename":"Bots.js","lineno":39,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000038","name":"BotMethods#getGatewayBot","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Get the gateway url to connect to and a recommended amount of shards to use</p>","returns":[{"type":{"names":["Promise.<GatewayData>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/topics/gateway#get-gateway-example-response\">Gateway data</a></p>"}],"examples":["let client = new SnowTransfer('TOKEN');\nlet result = await client.bot.getGateway();\n// result should be something like {\"url\": \"wss://gateway.discord.gg\", \"shards\": 1}"],"name":"getGatewayBot","longname":"BotMethods#getGatewayBot","kind":"function","memberof":"BotMethods","scope":"instance","params":[],"$longname":"BotMethods#getGatewayBot"}],"$constructor":{"comment":"/**\n     * Create a new Bot Method Handler\n     *\n     * Usually SnowTransfer creates a method handler for you, this is here for completion\n     *\n     * You can access the methods listed via `client.bot.method`, where `client` is an initialized SnowTransfer instance\n     * @param {RequestHandler} requestHandler request handler that calls the rest api\n     */","meta":{"range":[496,577],"filename":"Bots.js","lineno":15,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000011","name":"BotMethods","type":"MethodDefinition","paramnames":["requestHandler"]},"vars":{"":null}},"description":"<p>Create a new Bot Method Handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.bot.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"name":"BotMethods","longname":"BotMethods","kind":"class","scope":"global","undocumented":true,"$longname":"BotMethods"}}],"symbols":["BotMethods","BotMethods#getGateway","BotMethods#getGatewayBot"]},"Channels":{"documentation":[{"comment":"/**\n * Methods for interacting with Channels and Messages\n */","meta":{"range":[149,23364],"filename":"Channels.js","lineno":7,"columnno":0,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000014","name":"ChannelMethods","type":"ClassDeclaration","paramnames":["requestHandler"]}},"classdesc":"<p>Methods for interacting with Channels and Messages</p>","name":"ChannelMethods","longname":"ChannelMethods","kind":"class","scope":"global","description":"<p>Create a new Channel Method handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.channel.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"$longname":"ChannelMethods","$members":[{"comment":"/**\n     * Pin a message within a channel\n     * @param {String} channelId - Id of the channel\n     * @param {String} messageId - Id of the message\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_MESSAGES    |    always |\n     */","meta":{"range":[21490,21653],"filename":"Channels.js","lineno":455,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000698","name":"ChannelMethods#addChannelPinnedMessage","type":"MethodDefinition","paramnames":["channelId","messageId"]},"vars":{"":null}},"description":"<p>Pin a message within a channel</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the message</p>","name":"messageId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_MESSAGES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"addChannelPinnedMessage","longname":"ChannelMethods#addChannelPinnedMessage","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#addChannelPinnedMessage"},{"comment":"/**\n     * Add a user to a group dm\n     * @param {String} channelId - Id of the channel\n     * @param {String} userId - Id of the user to be removed\n     * @param {Object} data - Data to send to this endpoint\n     * @param {String} data.access_token - access token of the user that granted the app the gdm.join scope\n     * @param {String} [data.nick] - nickname of the user being added\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | OAUTH2 Scopes |\n     |---------------|\n     | gdm.join      |\n     */","meta":{"range":[22765,22938],"filename":"Channels.js","lineno":486,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000740","name":"ChannelMethods#addDmChannelRecipient","type":"MethodDefinition","paramnames":["channelId","userId","data"]},"vars":{"":null}},"description":"<p>Add a user to a group dm</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the user to be removed</p>","name":"userId"},{"type":{"names":["Object"]},"description":"<p>Data to send to this endpoint</p>","name":"data"},{"type":{"names":["String"]},"description":"<p>access token of the user that granted the app the gdm.join scope</p>","name":"data.access_token"},{"type":{"names":["String"]},"optional":true,"description":"<p>nickname of the user being added</p>","name":"data.nick"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>OAUTH2 Scopes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gdm.join</td>\n</tr>\n</tbody>\n</table>"}],"name":"addDmChannelRecipient","longname":"ChannelMethods#addDmChannelRecipient","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#addDmChannelRecipient"},{"comment":"/**\n     * Bulk delete messages, messages may not be older than 2 weeks\n     * @param {String} channelId - Id of the channel\n     * @param {String[]} messages - array of message ids to delete\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_MESSAGES    |    always |\n     */","meta":{"range":[11550,12435],"filename":"Channels.js","lineno":252,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000373","name":"ChannelMethods#bulkDeleteMessages","type":"MethodDefinition","paramnames":["channelId","messages"]},"vars":{"":null}},"description":"<p>Bulk delete messages, messages may not be older than 2 weeks</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["Array.<String>"]},"description":"<p>array of message ids to delete</p>","name":"messages"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_MESSAGES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"bulkDeleteMessages","longname":"ChannelMethods#bulkDeleteMessages","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#bulkDeleteMessages"},{"comment":"/**\n     * Create an invite for a channel\n     *\n     * If no data argument is passed, the invite will be created with the defaults listed below\n     * @param {String} channelId - Id of the channel\n     * @param {Object} [data={}] - invite data (optional)\n     * @param {Number} [data.max_age=86400] - max age of the invite in seconds\n     * @param {Number} [data.max_uses=0] - max uses of the invite\n     * @param {Boolean} [data.temporary=false] - if this invite only allows temporary membership\n     * @param {Boolean} [data.unique=false] - does not try to re-use similar invites when true (useful for creating many one-time invites)\n     * @returns {Promise.<Invite>} [Invite object](https://discordapp.com/developers/docs/resources/invite#invite-object) (with metadata)\n     *\n     * | Permissions needed    | condition |\n     |-----------------------|----------:|\n     | CREATE_INSTANT_INVITE |    always |\n     */","meta":{"range":[20085,20244],"filename":"Channels.js","lineno":421,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000637","name":"ChannelMethods#createChannelInvite","type":"MethodDefinition","paramnames":["channelId","data"]},"vars":{"":null}},"description":"<p>Create an invite for a channel</p>\n<p>If no data argument is passed, the invite will be created with the defaults listed below</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["Object"]},"optional":true,"defaultvalue":"{}","description":"<p>invite data (optional)</p>","name":"data"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":86400,"description":"<p>max age of the invite in seconds</p>","name":"data.max_age"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"<p>max uses of the invite</p>","name":"data.max_uses"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"<p>if this invite only allows temporary membership</p>","name":"data.temporary"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"<p>does not try to re-use similar invites when true (useful for creating many one-time invites)</p>","name":"data.unique"}],"returns":[{"type":{"names":["Promise.<Invite>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/invite#invite-object\">Invite object</a> (with metadata)</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CREATE_INSTANT_INVITE</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"createChannelInvite","longname":"ChannelMethods#createChannelInvite","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#createChannelInvite"},{"comment":"/**\n     * Creates a new Message within a channel\n     *\n     * **Make sure to use a filename with a proper extension (e.g. png, jpeg, etc.) when you want to upload files**\n     * @param {String} channelId - Id of the Channel to sent a message to\n     * @param {Object|String} data - Data to send, if data is a string it will be used as the content of the message,\n     * if data is not a string you should take a look at the properties below to know what you may send\n     * @param {?String} [data.content] - Content of the message\n     * @param {?Boolean} [data.tts=false] - if this message is text-to-speech\n     * @param {Object} [data.embed] - [Embed](https://discordapp.com/developers/docs/resources/channel#embed-object) to send\n     * @param {Object} [data.file] - File, that should be uploaded\n     * @param {String} [data.file.name] - Name of the file\n     * @param {File} [data.file.file] - Buffer with file contents\n     * @returns {Promise.<Object>} [discord message](https://discordapp.com/developers/docs/resources/channel#message-object) object\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | SEND_MESSAGES      |    always |\n     *\n     * @example\n     * // Make a bot say \"hi\" within a channel\n     * // createMessage sends the passed data as content, when you give it a string\n     * let client = new SnowTransfer('TOKEN')\n     * client.channel.createMessage('channel id', 'hi')\n     *\n     * @example\n     * // Send a rich embed object\n     * let client = new SnowTransfer('TOKEN')\n     * let embedData = {\n     *   title: 'This is a nice embed',\n     *   description: 'But winter is so cold',\n     *   fields: [\n     *       {name: 'Brr', value: 'Insert snowflake emoji here'}\n     *     ]\n     * }\n     * client.channel.createMessage('channel id', {embed: embedData})\n     *\n     * @example\n     * // Send a file with a comment\n     * let client = new SnowTransfer('TOKEN')\n     * // fileData will be a buffer with the data of the png image.\n     * let fileData = fs.readFileSync('nice_picture.png') // You should probably use fs.readFile, since it's asynchronous, synchronous methods may lag your bot.\n     * client.channel.createMessage('channel id', {content: 'This is a nice picture', file: {name: 'Optional Filename.png', file: fileData}})\n     */","meta":{"range":[8447,9086],"filename":"Channels.js","lineno":185,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000194","name":"ChannelMethods#createMessage","type":"MethodDefinition","paramnames":["channelId","data"]},"vars":{"":null}},"description":"<p>Creates a new Message within a channel</p>\n<p><strong>Make sure to use a filename with a proper extension (e.g. png, jpeg, etc.) when you want to upload files</strong></p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the Channel to sent a message to</p>","name":"channelId"},{"type":{"names":["Object","String"]},"description":"<p>Data to send, if data is a string it will be used as the content of the message,\nif data is not a string you should take a look at the properties below to know what you may send</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"nullable":true,"description":"<p>Content of the message</p>","name":"data.content"},{"type":{"names":["Boolean"]},"optional":true,"nullable":true,"defaultvalue":false,"description":"<p>if this message is text-to-speech</p>","name":"data.tts"},{"type":{"names":["Object"]},"optional":true,"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/channel#embed-object\">Embed</a> to send</p>","name":"data.embed"},{"type":{"names":["Object"]},"optional":true,"description":"<p>File, that should be uploaded</p>","name":"data.file"},{"type":{"names":["String"]},"optional":true,"description":"<p>Name of the file</p>","name":"data.file.name"},{"type":{"names":["File"]},"optional":true,"description":"<p>Buffer with file contents</p>","name":"data.file.file"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/channel#message-object\">discord message</a> object</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SEND_MESSAGES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// Make a bot say \"hi\" within a channel\n// createMessage sends the passed data as content, when you give it a string\nlet client = new SnowTransfer('TOKEN')\nclient.channel.createMessage('channel id', 'hi')","// Send a rich embed object\nlet client = new SnowTransfer('TOKEN')\nlet embedData = {\n  title: 'This is a nice embed',\n  description: 'But winter is so cold',\n  fields: [\n      {name: 'Brr', value: 'Insert snowflake emoji here'}\n    ]\n}\nclient.channel.createMessage('channel id', {embed: embedData})","// Send a file with a comment\nlet client = new SnowTransfer('TOKEN')\n// fileData will be a buffer with the data of the png image.\nlet fileData = fs.readFileSync('nice_picture.png') // You should probably use fs.readFile, since it's asynchronous, synchronous methods may lag your bot.\nclient.channel.createMessage('channel id', {content: 'This is a nice picture', file: {name: 'Optional Filename.png', file: fileData}})"],"name":"createMessage","longname":"ChannelMethods#createMessage","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#createMessage"},{"comment":"/**\n     * Adds a reaction to a message\n     * @param {String} channelId - Id of the channel\n     * @param {String} messageId - Id of the message\n     * @param {String} emoji - uri encoded reaction emoji to add,\n     * you may either use a discord emoji in the format `:emoji_name:emoji_id` or a unicode emoji,\n     * which can be found [here](http://www.unicode.org/emoji/charts/full-emoji-list.html)\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed   | Condition                                           |\n     |----------------------|----------------------------------------------------:|\n     | READ_MESSAGE_HISTORY | always                                             |\n     | ADD_REACTIONS        | When no other user has reacted with the emoji used |\n     * @example\n     * // This example uses a discord emoji\n     * let client = new SnowTransfer('TOKEN');\n     * client.channel.createReaction('channel Id', 'message Id', encodeURIComponent(':awooo:322522663304036352'));\n     * @example\n     * // using a utf-8 emoji\n     * let client = new SnowTransfer('TOKEN');\n     * client.channel.createReaction('channel Id', 'message Id', encodeURIComponent('😀'));\n     */","meta":{"range":[13683,13876],"filename":"Channels.js","lineno":287,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000457","name":"ChannelMethods#createReaction","type":"MethodDefinition","paramnames":["channelId","messageId","emoji"]},"vars":{"":null}},"description":"<p>Adds a reaction to a message</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the message</p>","name":"messageId"},{"type":{"names":["String"]},"description":"<p>uri encoded reaction emoji to add,\nyou may either use a discord emoji in the format <code>:emoji_name:emoji_id</code> or a unicode emoji,\nwhich can be found <a href=\"http://www.unicode.org/emoji/charts/full-emoji-list.html\">here</a></p>","name":"emoji"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">Condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>READ_MESSAGE_HISTORY</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n<tr>\n<td>ADD_REACTIONS</td>\n<td style=\"text-align:right\">When no other user has reacted with the emoji used</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// This example uses a discord emoji\nlet client = new SnowTransfer('TOKEN');\nclient.channel.createReaction('channel Id', 'message Id', encodeURIComponent(':awooo:322522663304036352'));","// using a utf-8 emoji\nlet client = new SnowTransfer('TOKEN');\nclient.channel.createReaction('channel Id', 'message Id', encodeURIComponent('😀'));"],"name":"createReaction","longname":"ChannelMethods#createReaction","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#createReaction"},{"comment":"/**\n     * Delete all reactions from a message\n     * @param {String} channelId - Id of the channel\n     * @param {String} messageId - Id of the message\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_MESSAGES    |    always |\n     */","meta":{"range":[17095,17270],"filename":"Channels.js","lineno":359,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000553","name":"ChannelMethods#deleteAllReactions","type":"MethodDefinition","paramnames":["channelId","messageId"]},"vars":{"":null}},"description":"<p>Delete all reactions from a message</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the message</p>","name":"messageId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_MESSAGES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"deleteAllReactions","longname":"ChannelMethods#deleteAllReactions","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#deleteAllReactions"},{"comment":"/**\n     * Delete a channel via Id\n     *\n     * This either **deletes** a Guild Channel or **closes** a Direct Message Channel\n     *\n     * **Be careful with deleting Guild Channels as this can not be undone!**\n     *\n     * When deleting a category, this does **not** delete the child channels of a category. They will just have their `parent_id` removed.\n     * @param {String} channelId - Id of the channel\n     * @returns {Promise.<Channel>} [discord channel](https://discordapp.com/developers/docs/resources/channel#channel-object) object\n     *\n     * | Permissions needed |                        Condition |\n     |--------------------|---------------------------------:|\n     | MANAGE_CHANNELS    |    When deleting a Guild Channel |\n     */","meta":{"range":[3422,3552],"filename":"Channels.js","lineno":78,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000068","name":"ChannelMethods#deleteChannel","type":"MethodDefinition","paramnames":["channelId"]},"vars":{"":null}},"description":"<p>Delete a channel via Id</p>\n<p>This either <strong>deletes</strong> a Guild Channel or <strong>closes</strong> a Direct Message Channel</p>\n<p><strong>Be careful with deleting Guild Channels as this can not be undone!</strong></p>\n<p>When deleting a category, this does <strong>not</strong> delete the child channels of a category. They will just have their <code>parent_id</code> removed.</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"}],"returns":[{"type":{"names":["Promise.<Channel>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object\">discord channel</a> object</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">Condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_CHANNELS</td>\n<td style=\"text-align:right\">When deleting a Guild Channel</td>\n</tr>\n</tbody>\n</table>"}],"name":"deleteChannel","longname":"ChannelMethods#deleteChannel","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#deleteChannel"},{"comment":"/**\n     * Delete a permission overwrite from a channel\n     * @param {String} channelId - Id of the channel\n     * @param {String} permissionId - Id of the permission overwrite\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_ROLES       |    always |\n     */","meta":{"range":[18440,18619],"filename":"Channels.js","lineno":388,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000597","name":"ChannelMethods#deleteChannelPermission","type":"MethodDefinition","paramnames":["channelId","permissionId"]},"vars":{"":null}},"description":"<p>Delete a permission overwrite from a channel</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the permission overwrite</p>","name":"permissionId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_ROLES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"deleteChannelPermission","longname":"ChannelMethods#deleteChannelPermission","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#deleteChannelPermission"},{"comment":"/**\n     * Delete a message\n     * @param {String} channelId - Id of the channel\n     * @param {String} messageId - Id of the message\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed |                                 condition|\n     |--------------------|---------------------------------------------:|\n     | MANAGE_MESSAGES    | When the bot isn't the author of the message |\n     * @example\n     * // Delete a message\n     * let client = new SnowTransfer('TOKEN')\n     * client.channel.deleteMessage('channel id', 'message id')\n     */","meta":{"range":[10973,11133],"filename":"Channels.js","lineno":238,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000352","name":"ChannelMethods#deleteMessage","type":"MethodDefinition","paramnames":["channelId","messageId"]},"vars":{"":null}},"description":"<p>Delete a message</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the message</p>","name":"messageId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_MESSAGES</td>\n<td style=\"text-align:right\">When the bot isn't the author of the message</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// Delete a message\nlet client = new SnowTransfer('TOKEN')\nclient.channel.deleteMessage('channel id', 'message id')"],"name":"deleteMessage","longname":"ChannelMethods#deleteMessage","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#deleteMessage"},{"comment":"/**\n     * Delete a reaction from a message\n     * @param {String} channelId - Id of the channel\n     * @param {String} messageId - Id of the message\n     * @param {String} emoji - reaction emoji\n     * @param {String} userId - Id of the user\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permission        | Condition    |\n     |-----------------    |-------:   |\n     | MANAGE_MESSAGES    | always    |\n     * @example\n     * // This example uses a discord emoji\n     * let client = new SnowTransfer('TOKEN');\n     * client.channel.deleteReaction('channel Id', 'message Id', encodeURIComponent(':awooo:322522663304036352'), 'user Id');\n     * @example\n     * // using a utf-8 emoji\n     * let client = new SnowTransfer('TOKEN');\n     * client.channel.deleteReaction('channel Id', 'message Id', encodeURIComponent('😀'), 'user Id');\n     */","meta":{"range":[15709,15914],"filename":"Channels.js","lineno":330,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000505","name":"ChannelMethods#deleteReaction","type":"MethodDefinition","paramnames":["channelId","messageId","emoji","userId"]},"vars":{"":null}},"description":"<p>Delete a reaction from a message</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the message</p>","name":"messageId"},{"type":{"names":["String"]},"description":"<p>reaction emoji</p>","name":"emoji"},{"type":{"names":["String"]},"description":"<p>Id of the user</p>","name":"userId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permission</th>\n<th style=\"text-align:right\">Condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_MESSAGES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// This example uses a discord emoji\nlet client = new SnowTransfer('TOKEN');\nclient.channel.deleteReaction('channel Id', 'message Id', encodeURIComponent(':awooo:322522663304036352'), 'user Id');","// using a utf-8 emoji\nlet client = new SnowTransfer('TOKEN');\nclient.channel.deleteReaction('channel Id', 'message Id', encodeURIComponent('😀'), 'user Id');"],"name":"deleteReaction","longname":"ChannelMethods#deleteReaction","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#deleteReaction"},{"comment":"/**\n     * Delete a reaction added by the current user from a message\n     * @param {String} channelId - Id of the channel\n     * @param {String} messageId - Id of the message\n     * @param {String} emoji - reaction emoji\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     * @example\n     * // This example uses a discord emoji\n     * let client = new SnowTransfer('TOKEN');\n     * client.channel.deleteReactionSelf('channel Id', 'message Id', encodeURIComponent(':awooo:322522663304036352'));\n     * @example\n     * // using a utf-8 emoji\n     * let client = new SnowTransfer('TOKEN');\n     * client.channel.deleteReactionSelf('channel Id', 'message Id', encodeURIComponent('😀'));\n     */","meta":{"range":[14609,14809],"filename":"Channels.js","lineno":306,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000481","name":"ChannelMethods#deleteReactionSelf","type":"MethodDefinition","paramnames":["channelId","messageId","emoji"]},"vars":{"":null}},"description":"<p>Delete a reaction added by the current user from a message</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the message</p>","name":"messageId"},{"type":{"names":["String"]},"description":"<p>reaction emoji</p>","name":"emoji"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>"}],"examples":["// This example uses a discord emoji\nlet client = new SnowTransfer('TOKEN');\nclient.channel.deleteReactionSelf('channel Id', 'message Id', encodeURIComponent(':awooo:322522663304036352'));","// using a utf-8 emoji\nlet client = new SnowTransfer('TOKEN');\nclient.channel.deleteReactionSelf('channel Id', 'message Id', encodeURIComponent('😀'));"],"name":"deleteReactionSelf","longname":"ChannelMethods#deleteReactionSelf","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#deleteReactionSelf"},{"comment":"/**\n     * Modify the permission overwrites of a channel\n     * @param {String} channelId - Id of the channel\n     * @param {String} permissionId - Id of the permission overwrite\n     * @param {PermissionOverwrite} data - modified [permission overwrite](https://discordapp.com/developers/docs/resources/channel#edit-channel-permissions-json-params) object\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_ROLES       |    always |\n     */","meta":{"range":[17851,18037],"filename":"Channels.js","lineno":374,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000574","name":"ChannelMethods#editChannelPermission","type":"MethodDefinition","paramnames":["channelId","permissionId","data"]},"vars":{"":null}},"description":"<p>Modify the permission overwrites of a channel</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the permission overwrite</p>","name":"permissionId"},{"type":{"names":["PermissionOverwrite"]},"description":"<p>modified <a href=\"https://discordapp.com/developers/docs/resources/channel#edit-channel-permissions-json-params\">permission overwrite</a> object</p>","name":"data"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_ROLES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"editChannelPermission","longname":"ChannelMethods#editChannelPermission","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#editChannelPermission"},{"comment":"/**\n     * Edit a message sent by the current user\n     * @param {String} channelId - Id of the channel\n     * @param {String} messageId - Id of the message\n     * @param {Object|String} data - Data to send\n     * @param {String} [data.content] - Content of the message\n     * @param {Object} [data.embed] - Embed to send\n     * @returns {Promise.<Object>} [discord message](https://discordapp.com/developers/docs/resources/channel#message-object) object\n     * @example\n     * // Simple ping response\n     * let client = new SnowTransfer('TOKEN')\n     * let time = Date.now()\n     * let message = await client.channel.createMessage('channel id', 'pong')\n     * client.channel.editMessage('channel id', message.id, `pong ${Date.now() - time}ms`)\n     */","meta":{"range":[9850,10360],"filename":"Channels.js","lineno":213,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000284","name":"ChannelMethods#editMessage","type":"MethodDefinition","paramnames":["channelId","messageId","data"]},"vars":{"":null}},"description":"<p>Edit a message sent by the current user</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the message</p>","name":"messageId"},{"type":{"names":["Object","String"]},"description":"<p>Data to send</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>Content of the message</p>","name":"data.content"},{"type":{"names":["Object"]},"optional":true,"description":"<p>Embed to send</p>","name":"data.embed"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/channel#message-object\">discord message</a> object</p>"}],"examples":["// Simple ping response\nlet client = new SnowTransfer('TOKEN')\nlet time = Date.now()\nlet message = await client.channel.createMessage('channel id', 'pong')\nclient.channel.editMessage('channel id', message.id, `pong ${Date.now() - time}ms`)"],"name":"editMessage","longname":"ChannelMethods#editMessage","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#editMessage"},{"comment":"/**\n     * Get a channel via Id\n     * @param {String} channelId - Id of the channel\n     * @returns {Promise.<Channel>} - [discord channel](https://discordapp.com/developers/docs/resources/channel#channel-object) object\n     * @example\n     * let client = new SnowTransfer('TOKEN')\n     * let channel = await client.channel.getChannel('channel id')\n     */","meta":{"range":[1021,1145],"filename":"Channels.js","lineno":29,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000028","name":"ChannelMethods#getChannel","type":"MethodDefinition","paramnames":["channelId"]},"vars":{"":null}},"description":"<p>Get a channel via Id</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"}],"returns":[{"type":{"names":["Promise.<Channel>"]},"description":"<ul>\n<li><a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object\">discord channel</a> object</li>\n</ul>"}],"examples":["let client = new SnowTransfer('TOKEN')\nlet channel = await client.channel.getChannel('channel id')"],"name":"getChannel","longname":"ChannelMethods#getChannel","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#getChannel"},{"comment":"/**\n     * Get a list of invites for a channel\n     * @param {String} channelId - Id of the channel\n     * @returns {Promise.<Invite[]>} Array of [invite objects](https://discordapp.com/developers/docs/resources/invite#invite-object) (with metadata)\n     *\n     *| Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_CHANNELS    |    always |\n     */","meta":{"range":[19015,19154],"filename":"Channels.js","lineno":401,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000618","name":"ChannelMethods#getChannelInvites","type":"MethodDefinition","paramnames":["channelId"]},"vars":{"":null}},"description":"<p>Get a list of invites for a channel</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"}],"returns":[{"type":{"names":["Promise.<Array.<Invite>>"]},"description":"<p>Array of <a href=\"https://discordapp.com/developers/docs/resources/invite#invite-object\">invite objects</a> (with metadata)</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_CHANNELS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"getChannelInvites","longname":"ChannelMethods#getChannelInvites","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#getChannelInvites"},{"comment":"/**\n     * Get a single message via Id\n     * @param {String} channelId - Id of the channel\n     * @param {String} messageId - Id of the message\n     * @returns {Promise.<Object>} [discord message](https://discordapp.com/developers/docs/resources/channel#message-object) object\n     *\n     * | Permissions needed   | condition |\n     |----------------------|----------:|\n     | READ_MESSAGE_HISTORY |    always |\n\n     * @example\n     * // Get a single message from a channel via id\n     * let client = new SnowTransfer('TOKEN')\n     * let message = await client.channel.getChannelMessage('channel id', 'message id')\n     */","meta":{"range":[5952,6113],"filename":"Channels.js","lineno":136,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000173","name":"ChannelMethods#getChannelMessage","type":"MethodDefinition","paramnames":["channelId","messageId"]},"vars":{"":null}},"description":"<p>Get a single message via Id</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the message</p>","name":"messageId"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/channel#message-object\">discord message</a> object</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>READ_MESSAGE_HISTORY</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// Get a single message from a channel via id\nlet client = new SnowTransfer('TOKEN')\nlet message = await client.channel.getChannelMessage('channel id', 'message id')"],"name":"getChannelMessage","longname":"ChannelMethods#getChannelMessage","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#getChannelMessage"},{"comment":"/**\n     * Get a list of messages from a channel\n     * @param {String} channelId - Id of the channel\n     * @param {Object} [options]\n     * @param {String} [options.around] - Get's messages around the Id of the passed snowflake\n     * @param {String} [options.before] - Get's messages before the Id of the passed snowflake\n     * @param {String} [options.after] - Get's messages after the Id of the passed snowflake\n     * @param {Number} [options.limit=50] - Number of messages to get, values between 1-100 allowed\n     * @returns {Promise.<Object[]>} Array of [discord message](https://discordapp.com/developers/docs/resources/channel#message-object) objects\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | READ_MESSAGES      |    always |\n\n     * @example\n     * // Fetch the last 20 messages from a channel\n     * let client = new SnowTransfer('TOKEN')\n     * let options = {\n     *   limit: 20\n     * }\n     * let messages = await client.channel.getChannelMessages('channel id', options);\n     */","meta":{"range":[4614,5317],"filename":"Channels.js","lineno":104,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000087","name":"ChannelMethods#getChannelMessages","type":"MethodDefinition","paramnames":["channelId","options"]},"vars":{"":null}},"description":"<p>Get a list of messages from a channel</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["Object"]},"optional":true,"name":"options"},{"type":{"names":["String"]},"optional":true,"description":"<p>Get's messages around the Id of the passed snowflake</p>","name":"options.around"},{"type":{"names":["String"]},"optional":true,"description":"<p>Get's messages before the Id of the passed snowflake</p>","name":"options.before"},{"type":{"names":["String"]},"optional":true,"description":"<p>Get's messages after the Id of the passed snowflake</p>","name":"options.after"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":50,"description":"<p>Number of messages to get, values between 1-100 allowed</p>","name":"options.limit"}],"returns":[{"type":{"names":["Promise.<Array.<Object>>"]},"description":"<p>Array of <a href=\"https://discordapp.com/developers/docs/resources/channel#message-object\">discord message</a> objects</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>READ_MESSAGES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// Fetch the last 20 messages from a channel\nlet client = new SnowTransfer('TOKEN')\nlet options = {\n  limit: 20\n}\nlet messages = await client.channel.getChannelMessages('channel id', options);"],"name":"getChannelMessages","longname":"ChannelMethods#getChannelMessages","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#getChannelMessages"},{"comment":"/**\n     * Get a list of pinned messages for a channel\n     * @param {String} channelId - Id of the channel\n     * @returns {Promise.<Object[]>} Array of [message objects](https://discordapp.com/developers/docs/resources/channel#message-object)\n     */","meta":{"range":[20974,21117],"filename":"Channels.js","lineno":441,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000679","name":"ChannelMethods#getChannelPinnedMessages","type":"MethodDefinition","paramnames":["channelId"]},"vars":{"":null}},"description":"<p>Get a list of pinned messages for a channel</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"}],"returns":[{"type":{"names":["Promise.<Array.<Object>>"]},"description":"<p>Array of <a href=\"https://discordapp.com/developers/docs/resources/channel#message-object\">message objects</a></p>"}],"name":"getChannelPinnedMessages","longname":"ChannelMethods#getChannelPinnedMessages","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#getChannelPinnedMessages"},{"comment":"/**\n     * Get a list of users that reacted with a certain emoji on a certain message\n     * @param {String} channelId - Id of the channel\n     * @param {String} messageId - Id of the message\n     * @param {String} emoji - reaction emoji\n     * @returns {Promise.<User[]>} Array of [user objects](https://discordapp.com/developers/docs/resources/user#user-object)\n     * @example\n     * // This example uses a discord emoji\n     * let client = new SnowTransfer('TOKEN');\n     * let reactions = await client.channel.getReactions('channel Id', 'message Id', encodeURIComponent(':awooo:322522663304036352'));\n     */","meta":{"range":[16538,16717],"filename":"Channels.js","lineno":345,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000530","name":"ChannelMethods#getReactions","type":"MethodDefinition","paramnames":["channelId","messageId","emoji"]},"vars":{"":null}},"description":"<p>Get a list of users that reacted with a certain emoji on a certain message</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the message</p>","name":"messageId"},{"type":{"names":["String"]},"description":"<p>reaction emoji</p>","name":"emoji"}],"returns":[{"type":{"names":["Promise.<Array.<User>>"]},"description":"<p>Array of <a href=\"https://discordapp.com/developers/docs/resources/user#user-object\">user objects</a></p>"}],"examples":["// This example uses a discord emoji\nlet client = new SnowTransfer('TOKEN');\nlet reactions = await client.channel.getReactions('channel Id', 'message Id', encodeURIComponent(':awooo:322522663304036352'));"],"name":"getReactions","longname":"ChannelMethods#getReactions","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#getReactions"},{"comment":"/**\n     * Remove a pinned message from a channel\n     * @param {String} channelId - Id of the channel\n     * @param {String} messageId - Id of the message\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_MESSAGES    |    always |\n     */","meta":{"range":[22034,22203],"filename":"Channels.js","lineno":469,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000719","name":"ChannelMethods#removeChannelPinnedMessage","type":"MethodDefinition","paramnames":["channelId","messageId"]},"vars":{"":null}},"description":"<p>Remove a pinned message from a channel</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the message</p>","name":"messageId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_MESSAGES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"removeChannelPinnedMessage","longname":"ChannelMethods#removeChannelPinnedMessage","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#removeChannelPinnedMessage"},{"comment":"/**\n     * Remove a recipient from a group dm\n     * @param {String} channelId - Id of the channel\n     * @param {String} userId - Id of the user to be removed\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     */","meta":{"range":[23194,23361],"filename":"Channels.js","lineno":496,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000763","name":"ChannelMethods#removeDmChannelRecipient","type":"MethodDefinition","paramnames":["channelId","userId"]},"vars":{"":null}},"description":"<p>Remove a recipient from a group dm</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["String"]},"description":"<p>Id of the user to be removed</p>","name":"userId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>"}],"name":"removeDmChannelRecipient","longname":"ChannelMethods#removeDmChannelRecipient","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#removeDmChannelRecipient"},{"comment":"/**\n     * Send an indicator that the current user is typing within a channel.\n     *\n     * **You should generally avoid this method unless used for longer computations (>1s)**\n     * @param {String} channelId - Id of the channel\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     */","meta":{"range":[20571,20711],"filename":"Channels.js","lineno":432,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000660","name":"ChannelMethods#startChannelTyping","type":"MethodDefinition","paramnames":["channelId"]},"vars":{"":null}},"description":"<p>Send an indicator that the current user is typing within a channel.</p>\n<p><strong>You should generally avoid this method unless used for longer computations (&gt;1s)</strong></p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>"}],"name":"startChannelTyping","longname":"ChannelMethods#startChannelTyping","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#startChannelTyping"},{"comment":"/**\n     * Update a channel\n     * @param {String} channelId - Id of the channel\n     * @param {Object} data - Data to send\n     * @param {String} [data.name] - New name of the channel\n     * @param {Number} [data.position] - New position of the channel\n     * @param {String} [data.topic] - New topic of the channel\n     * @param {Boolean} [data.nsfw] - Update nsfw type of the channel\n     * @param {Number} [data.bitrate] - Update bitrate of the channel\n     * @param {Number} [data.user_limit] - Update the limit of users that are allowed to be in a channel\n     * @param {Array} [data.permission_overwrites] - Update the permission overwrites\n     * @param {String} [data.parent_id] - Id of the parent category of the channel\n     * @returns {Promise.<Channel>} [discord channel](https://discordapp.com/developers/docs/resources/channel#channel-object) object\n     *\n     * | Permissions needed | Condition |\n     |--------------------|----------:|\n     | MANAGE_CHANNELS    |    always |\n     * @example\n     * // This example updates a channel with the passed id to use \"New Name\" as it's name and \"Look at this cool topic\" as the topic\n     * let client = new SnowTransfer('TOKEN')\n     * let updateData = {\n     *   name: 'New Name',\n     *   topic: 'Look at this cool topic'\n     * }\n     * client.channel.updateChannel('channel id', updateData)\n     */","meta":{"range":[2519,2660],"filename":"Channels.js","lineno":59,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000047","name":"ChannelMethods#updateChannel","type":"MethodDefinition","paramnames":["channelId","data"]},"vars":{"":null}},"description":"<p>Update a channel</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["Object"]},"description":"<p>Data to send</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>New name of the channel</p>","name":"data.name"},{"type":{"names":["Number"]},"optional":true,"description":"<p>New position of the channel</p>","name":"data.position"},{"type":{"names":["String"]},"optional":true,"description":"<p>New topic of the channel</p>","name":"data.topic"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>Update nsfw type of the channel</p>","name":"data.nsfw"},{"type":{"names":["Number"]},"optional":true,"description":"<p>Update bitrate of the channel</p>","name":"data.bitrate"},{"type":{"names":["Number"]},"optional":true,"description":"<p>Update the limit of users that are allowed to be in a channel</p>","name":"data.user_limit"},{"type":{"names":["Array"]},"optional":true,"description":"<p>Update the permission overwrites</p>","name":"data.permission_overwrites"},{"type":{"names":["String"]},"optional":true,"description":"<p>Id of the parent category of the channel</p>","name":"data.parent_id"}],"returns":[{"type":{"names":["Promise.<Channel>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object\">discord channel</a> object</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">Condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_CHANNELS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// This example updates a channel with the passed id to use \"New Name\" as it's name and \"Look at this cool topic\" as the topic\nlet client = new SnowTransfer('TOKEN')\nlet updateData = {\n  name: 'New Name',\n  topic: 'Look at this cool topic'\n}\nclient.channel.updateChannel('channel id', updateData)"],"name":"updateChannel","longname":"ChannelMethods#updateChannel","kind":"function","memberof":"ChannelMethods","scope":"instance","async":true,"$longname":"ChannelMethods#updateChannel"}],"$constructor":{"comment":"/**\n     * Create a new Channel Method handler\n     *\n     * Usually SnowTransfer creates a method handler for you, this is here for completion\n     *\n     * You can access the methods listed via `client.channel.method`, where `client` is an initialized SnowTransfer instance\n     * @param {RequestHandler} requestHandler - request handler that calls the rest api\n     * @constructor\n     */","meta":{"range":[572,653],"filename":"Channels.js","lineno":17,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000017","name":"ChannelMethods","type":"MethodDefinition","paramnames":["requestHandler"]},"vars":{"":null}},"description":"<p>Create a new Channel Method handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.channel.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"kind":"class","name":"ChannelMethods","longname":"ChannelMethods","scope":"global","undocumented":true,"$longname":"ChannelMethods"}}],"symbols":["ChannelMethods","ChannelMethods#addChannelPinnedMessage","ChannelMethods#addDmChannelRecipient","ChannelMethods#bulkDeleteMessages","ChannelMethods#createChannelInvite","ChannelMethods#createMessage","ChannelMethods#createReaction","ChannelMethods#deleteAllReactions","ChannelMethods#deleteChannel","ChannelMethods#deleteChannelPermission","ChannelMethods#deleteMessage","ChannelMethods#deleteReaction","ChannelMethods#deleteReactionSelf","ChannelMethods#editChannelPermission","ChannelMethods#editMessage","ChannelMethods#getChannel","ChannelMethods#getChannelInvites","ChannelMethods#getChannelMessage","ChannelMethods#getChannelMessages","ChannelMethods#getChannelPinnedMessages","ChannelMethods#getReactions","ChannelMethods#removeChannelPinnedMessage","ChannelMethods#removeDmChannelRecipient","ChannelMethods#startChannelTyping","ChannelMethods#updateChannel"]},"Emojis":{"documentation":[{"comment":"/**\n * Methods for interacting with emojis\n */","meta":{"range":[91,4213],"filename":"Emojis.js","lineno":6,"columnno":0,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000008","name":"EmojiMethods","type":"ClassDeclaration","paramnames":["requestHandler"]}},"classdesc":"<p>Methods for interacting with emojis</p>","name":"EmojiMethods","longname":"EmojiMethods","kind":"class","scope":"global","description":"<p>Create a new Emoji Method handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.emoji.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"$longname":"EmojiMethods","$members":[{"comment":"/**\n     * Create a new Emoji\n     * @param {String} guildId - Id of the guild\n     * @param {Object} data - Emoji data, check the example\n     * @param {String} data.name - name of the emoji\n     * @param {String} data.image - base 64 avatar\n     * @returns {Promise.<Emoji>} [Emoji object](https://discordapp.com/developers/docs/resources/emoji#emoji-object)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_EMOJIS      |    always |\n     * @example\n     * // upload a simple png emoji with a name of \"niceEmoji\"\n     * let client = new SnowTransfer('TOKEN');\n     * let fileData = fs.readFileSync('nice_emoji.png') // You should probably use fs.readFile, since it's asynchronous, synchronous methods may lag your bot.\n     * let emojiData = {\n     *   name: 'niceEmoji',\n     *   image: `data:image/png;base64,${fileData.toString('base64')}` // base64 data url: data:mimetype;base64,base64String\n     * }\n     * client.emoji.createEmoji('guild id', emojiData)\n     */","meta":{"range":[2666,2805],"filename":"Emojis.js","lineno":68,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000062","name":"EmojiMethods#createEmoji","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Create a new Emoji</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["Object"]},"description":"<p>Emoji data, check the example</p>","name":"data"},{"type":{"names":["String"]},"description":"<p>name of the emoji</p>","name":"data.name"},{"type":{"names":["String"]},"description":"<p>base 64 avatar</p>","name":"data.image"}],"returns":[{"type":{"names":["Promise.<Emoji>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/emoji#emoji-object\">Emoji object</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_EMOJIS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// upload a simple png emoji with a name of \"niceEmoji\"\nlet client = new SnowTransfer('TOKEN');\nlet fileData = fs.readFileSync('nice_emoji.png') // You should probably use fs.readFile, since it's asynchronous, synchronous methods may lag your bot.\nlet emojiData = {\n  name: 'niceEmoji',\n  image: `data:image/png;base64,${fileData.toString('base64')}` // base64 data url: data:mimetype;base64,base64String\n}\nclient.emoji.createEmoji('guild id', emojiData)"],"name":"createEmoji","longname":"EmojiMethods#createEmoji","kind":"function","memberof":"EmojiMethods","scope":"instance","async":true,"$longname":"EmojiMethods#createEmoji"},{"comment":"/**\n     * Delete a emoji\n     * @param {String} guildId - Id of the guild\n     * @param {String} emojiId - Id of the emoji\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_EMOJIS      |    always |\n     */","meta":{"range":[4072,4210],"filename":"Emojis.js","lineno":105,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000105","name":"EmojiMethods#deleteEmoji","type":"MethodDefinition","paramnames":["guildId","emojiId"]},"vars":{"":null}},"description":"<p>Delete a emoji</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the emoji</p>","name":"emojiId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_EMOJIS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"deleteEmoji","longname":"EmojiMethods#deleteEmoji","kind":"function","memberof":"EmojiMethods","scope":"instance","async":true,"$longname":"EmojiMethods#deleteEmoji"},{"comment":"/**\n     * Get an emoji via guildId + emojiId\n     * @param {String} guildId - Id of the guild\n     * @param {String} emojiId - Id of the emoji\n     * @returns {Promise.<Emoji>} [Emoji object](https://discordapp.com/developers/docs/resources/emoji#emoji-object)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_EMOJIS      |    always |\n     */","meta":{"range":[1491,1631],"filename":"Emojis.js","lineno":43,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000041","name":"EmojiMethods#getEmoji","type":"MethodDefinition","paramnames":["guildId","emojiId"]},"vars":{"":null}},"description":"<p>Get an emoji via guildId + emojiId</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the emoji</p>","name":"emojiId"}],"returns":[{"type":{"names":["Promise.<Emoji>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/emoji#emoji-object\">Emoji object</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_EMOJIS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"getEmoji","longname":"EmojiMethods#getEmoji","kind":"function","memberof":"EmojiMethods","scope":"instance","async":true,"$longname":"EmojiMethods#getEmoji"},{"comment":"/**\n     * Get a list of emojis of a guild\n     * @param {String} guildId - Id of the guild\n     * @returns {Promise.<Emoji[]>} Array of [emoji objects](https://discordapp.com/developers/docs/resources/emoji#emoji-object)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_EMOJIS      |    always |\n     */","meta":{"range":[958,1082],"filename":"Emojis.js","lineno":29,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000022","name":"EmojiMethods#getEmojis","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Get a list of emojis of a guild</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<Array.<Emoji>>"]},"description":"<p>Array of <a href=\"https://discordapp.com/developers/docs/resources/emoji#emoji-object\">emoji objects</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_EMOJIS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"getEmojis","longname":"EmojiMethods#getEmojis","kind":"function","memberof":"EmojiMethods","scope":"instance","async":true,"$longname":"EmojiMethods#getEmojis"},{"comment":"/**\n     * Update an existing emoji\n     * @param {String} guildId - Id of the guild\n     * @param {String} emojiId - Id of the emoji\n     * @param {Object} data - Emoji data, check the example\n     * @param {String} data.name - new name of the emoji\n     * @returns {Promise.<Emoji>} [Emoji object](https://discordapp.com/developers/docs/resources/emoji#emoji-object)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_EMOJIS      |    always |\n     * @example\n     * // Change the name of an existing emoji to \"niceEmote\"\n     * let client = new SnowTransfer('TOKEN');\n     * let emojiData = {\n     *   name: 'niceEmote'\n     * }\n     * client.emoji.updateEmoji('guild id', 'emoji id', emojiData)\n     */","meta":{"range":[3574,3723],"filename":"Emojis.js","lineno":91,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000083","name":"EmojiMethods#updateEmoji","type":"MethodDefinition","paramnames":["guildId","emojiId","data"]},"vars":{"":null}},"description":"<p>Update an existing emoji</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the emoji</p>","name":"emojiId"},{"type":{"names":["Object"]},"description":"<p>Emoji data, check the example</p>","name":"data"},{"type":{"names":["String"]},"description":"<p>new name of the emoji</p>","name":"data.name"}],"returns":[{"type":{"names":["Promise.<Emoji>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/emoji#emoji-object\">Emoji object</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_EMOJIS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// Change the name of an existing emoji to \"niceEmote\"\nlet client = new SnowTransfer('TOKEN');\nlet emojiData = {\n  name: 'niceEmote'\n}\nclient.emoji.updateEmoji('guild id', 'emoji id', emojiData)"],"name":"updateEmoji","longname":"EmojiMethods#updateEmoji","kind":"function","memberof":"EmojiMethods","scope":"instance","async":true,"$longname":"EmojiMethods#updateEmoji"}],"$constructor":{"comment":"/**\n     * Create a new Emoji Method handler\n     *\n     * Usually SnowTransfer creates a method handler for you, this is here for completion\n     *\n     * You can access the methods listed via `client.emoji.method`, where `client` is an initialized SnowTransfer instance\n     * @param {RequestHandler} requestHandler - request handler that calls the rest api\n     * @constructor\n     */","meta":{"range":[508,589],"filename":"Emojis.js","lineno":16,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000011","name":"EmojiMethods","type":"MethodDefinition","paramnames":["requestHandler"]},"vars":{"":null}},"description":"<p>Create a new Emoji Method handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.emoji.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"kind":"class","name":"EmojiMethods","longname":"EmojiMethods","scope":"global","undocumented":true,"$longname":"EmojiMethods"}}],"symbols":["EmojiMethods","EmojiMethods#createEmoji","EmojiMethods#deleteEmoji","EmojiMethods#getEmoji","EmojiMethods#getEmojis","EmojiMethods#updateEmoji"]},"Guilds":{"documentation":[{"comment":"/**\n * Methods for interacting with Guilds\n */","meta":{"range":[91,27170],"filename":"Guilds.js","lineno":6,"columnno":0,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000008","name":"GuildMethods","type":"ClassDeclaration","paramnames":["requestHandler"]}},"classdesc":"<p>Methods for interacting with Guilds</p>","name":"GuildMethods","longname":"GuildMethods","kind":"class","scope":"global","description":"<p>Create a new Guild Method Handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.guild.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"$longname":"GuildMethods","$members":[{"comment":"/**\n     * Add a guild member to a guild via oauth2 access token\n     *\n     * **You need the oauth2 `guilds.join` scope granted to the access_token**\n     *\n     *\n     * **Your bot has to be a member of the guild you want to add the user to**\n     *\n     * @param {String} guildId - Id of the guild\n     * @param {String} memberId - Id of the guild member\n     * @param {Object} data - object containing the needed request data\n     * @param {String} data.access_token - oauth2 access token with a `guilds.join` scope enabled\n     * @param {String} [data.nick] - nickname of the new member\n     * @param {String[]} [data.roles] - Array of Role Ids the new member should have\n     * @param {Boolean} [data.mute] - if the new member should be muted\n     * @param {Boolean} [data.deaf] - if the new member is deaf\n     * @returns {Promise.<GuildMember>} - [guild member](https://discordapp.com/developers/docs/resources/guild#guild-member-object-guild-member-structure)\n     *\n     * | Permissions needed    | condition |\n     |-----------------------|----------:|\n     | CREATE_INSTANT_INVITE |    always |\n     *\n     * | OAUTH2 Scopes |\n     |---------------|\n     | guilds.join   |\n     *\n     * @example\n     * // add a user to a server\n     * let client = new SnowTransfer('TOKEN')\n     * let memberData = {\n     *   access_token: 'access token of a user with the guilds.join scope'\n     * }\n     * client.guild.addGuildMember('guildId', 'memberId', memberData)\n     */","meta":{"range":[9290,9451],"filename":"Guilds.js","lineno":195,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000204","name":"GuildMethods#addGuildMember","type":"MethodDefinition","paramnames":["guildId","memberId","data"]},"vars":{"":null}},"description":"<p>Add a guild member to a guild via oauth2 access token</p>\n<p><strong>You need the oauth2 <code>guilds.join</code> scope granted to the access_token</strong></p>\n<p><strong>Your bot has to be a member of the guild you want to add the user to</strong></p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the guild member</p>","name":"memberId"},{"type":{"names":["Object"]},"description":"<p>object containing the needed request data</p>","name":"data"},{"type":{"names":["String"]},"description":"<p>oauth2 access token with a <code>guilds.join</code> scope enabled</p>","name":"data.access_token"},{"type":{"names":["String"]},"optional":true,"description":"<p>nickname of the new member</p>","name":"data.nick"},{"type":{"names":["Array.<String>"]},"optional":true,"description":"<p>Array of Role Ids the new member should have</p>","name":"data.roles"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>if the new member should be muted</p>","name":"data.mute"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>if the new member is deaf</p>","name":"data.deaf"}],"returns":[{"type":{"names":["Promise.<GuildMember>"]},"description":"<ul>\n<li><a href=\"https://discordapp.com/developers/docs/resources/guild#guild-member-object-guild-member-structure\">guild member</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CREATE_INSTANT_INVITE</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>OAUTH2 Scopes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>guilds.join</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// add a user to a server\nlet client = new SnowTransfer('TOKEN')\nlet memberData = {\n  access_token: 'access token of a user with the guilds.join scope'\n}\nclient.guild.addGuildMember('guildId', 'memberId', memberData)"],"name":"addGuildMember","longname":"GuildMethods#addGuildMember","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#addGuildMember"},{"comment":"/**\n     * Add a role to a guild member\n     * @param {String} guildId - Id of the guild\n     * @param {String} memberId - Id of the guild member\n     * @param {String} roleId - Id of the role\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_ROLES       |    always |\n     */","meta":{"range":[12475,12649],"filename":"Guilds.js","lineno":269,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000272","name":"GuildMethods#addGuildMemberRole","type":"MethodDefinition","paramnames":["guildId","memberId","roleId"]},"vars":{"":null}},"description":"<p>Add a role to a guild member</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the guild member</p>","name":"memberId"},{"type":{"names":["String"]},"description":"<p>Id of the role</p>","name":"roleId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_ROLES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"addGuildMemberRole","longname":"GuildMethods#addGuildMemberRole","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#addGuildMemberRole"},{"comment":"/**\n     * Create a new Guild, **limited to 10 guilds (you may create more if you are whitelisted)**\n     * Check the [discord docs](https://discordapp.com/developers/docs/resources/guild#create-guild) for more infos\n     * @param {Object} data - data\n     * @param {String} data.name - name of the guild\n     * @param {String} [data.region] - [voice region](https://discordapp.com/developers/docs/resources/voice#voice-region-voice-region-structure)\n     * @param {String} [data.icon] - base64 encoded jpeg icon to use for the guild\n     * @param {Number} [data.verification_level] - guild [verification level](https://discordapp.com/developers/docs/resources/guild#guild-object-verification-level)\n     * @param {Number} [data.default_message_notifications] - default message [notification setting](https://discordapp.com/developers/docs/resources/guild#default-message-notification-level)\n     * @param {Channel[]} [data.channels] - array of [channels](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure)\n     * @param {Role[]} [data.roles] - array of [roles](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure)\n     * @returns {Promise.<Guild>} [Guild](https://discordapp.com/developers/docs/resources/guild#guild-object)\n     *\n     * @example\n     * // Creates a simple guild with the name \"Demo Guild\"\n     * let client = new SnowTransfer('TOKEN')\n     * let guildData = {\n     *   name: 'Demo Guild'\n     * }\n     * client.guild.createGuild(guildData)\n     */","meta":{"range":[2125,2240],"filename":"Guilds.js","lineno":40,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000022","name":"GuildMethods#createGuild","type":"MethodDefinition","paramnames":["data"]},"vars":{"":null}},"description":"<p>Create a new Guild, <strong>limited to 10 guilds (you may create more if you are whitelisted)</strong>\nCheck the <a href=\"https://discordapp.com/developers/docs/resources/guild#create-guild\">discord docs</a> for more infos</p>","params":[{"type":{"names":["Object"]},"description":"<p>data</p>","name":"data"},{"type":{"names":["String"]},"description":"<p>name of the guild</p>","name":"data.name"},{"type":{"names":["String"]},"optional":true,"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/voice#voice-region-voice-region-structure\">voice region</a></p>","name":"data.region"},{"type":{"names":["String"]},"optional":true,"description":"<p>base64 encoded jpeg icon to use for the guild</p>","name":"data.icon"},{"type":{"names":["Number"]},"optional":true,"description":"<p>guild <a href=\"https://discordapp.com/developers/docs/resources/guild#guild-object-verification-level\">verification level</a></p>","name":"data.verification_level"},{"type":{"names":["Number"]},"optional":true,"description":"<p>default message <a href=\"https://discordapp.com/developers/docs/resources/guild#default-message-notification-level\">notification setting</a></p>","name":"data.default_message_notifications"},{"type":{"names":["Array.<Channel>"]},"optional":true,"description":"<p>array of <a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure\">channels</a></p>","name":"data.channels"},{"type":{"names":["Array.<Role>"]},"optional":true,"description":"<p>array of <a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure\">roles</a></p>","name":"data.roles"}],"returns":[{"type":{"names":["Promise.<Guild>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/guild#guild-object\">Guild</a></p>"}],"examples":["// Creates a simple guild with the name \"Demo Guild\"\nlet client = new SnowTransfer('TOKEN')\nlet guildData = {\n  name: 'Demo Guild'\n}\nclient.guild.createGuild(guildData)"],"name":"createGuild","longname":"GuildMethods#createGuild","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#createGuild"},{"comment":"/**\n     * Ban a guild member\n     * @param {String} guildId - Id of the guild\n     * @param {String} memberId - Id of the guild member\n     * @param {Object} [data] - object with a reason and a delete-message-days property\n     * @param {String} [data.reason] - Audit log reason for the ban\n     * @param {Number} [data.delete-message-days] - Number of Days of messages that should be removed\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | BAN_MEMBERS        |    always |\n     *\n     * @example\n     * // Ban a user with a reason and delete the last 2 days of his messages\n     * let client = new SnowTransfer('TOKEN')\n     * let banData = {\n     *   reason: 'Memes were not good enough',\n     *   \"delete-message-days\":2\n     * }\n     * client.guild.createGuildBan('guild Id', 'memberId', banData)\n     */","meta":{"range":[15605,15763],"filename":"Guilds.js","lineno":347,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000360","name":"GuildMethods#createGuildBan","type":"MethodDefinition","paramnames":["guildId","memberId","data"]},"vars":{"":null}},"description":"<p>Ban a guild member</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the guild member</p>","name":"memberId"},{"type":{"names":["Object"]},"optional":true,"description":"<p>object with a reason and a delete-message-days property</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>Audit log reason for the ban</p>","name":"data.reason"},{"type":{"names":["Number"]},"optional":true,"description":"<p>Number of Days of messages that should be removed</p>","name":"data.delete-message-days"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BAN_MEMBERS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// Ban a user with a reason and delete the last 2 days of his messages\nlet client = new SnowTransfer('TOKEN')\nlet banData = {\n  reason: 'Memes were not good enough',\n  \"delete-message-days\":2\n}\nclient.guild.createGuildBan('guild Id', 'memberId', banData)"],"name":"createGuildBan","longname":"GuildMethods#createGuildBan","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#createGuildBan"},{"comment":"/**\n     * Create a channel within a guild\n     * @param {String} guildId - Id of the guild\n     * @param {Object} data - channel properties\n     * @param {String} data.name - name of the channel\n     * @param {Number} [data.type] - [type](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-types) of the channel\n     * @param {Number} [data.bitrate] - bitrate of the channel (voice only)\n     * @param {Number} [data.user_limit] - user limit of a channel (voice only)\n     * @param {PermissionOverwrite[]} [data.permission_overwrites] - permissions overwrites for the channel\n     * @returns {Promise.<Channel>} [channel object](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure)\n     *\n     * | Permissions needed | condition |\n     |--------------------|-----------:|\n     | MANAGE_CHANNELS    | always    |\n     */","meta":{"range":[6060,6208],"filename":"Guilds.js","lineno":123,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000118","name":"GuildMethods#createGuildChannel","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Create a channel within a guild</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["Object"]},"description":"<p>channel properties</p>","name":"data"},{"type":{"names":["String"]},"description":"<p>name of the channel</p>","name":"data.name"},{"type":{"names":["Number"]},"optional":true,"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object-channel-types\">type</a> of the channel</p>","name":"data.type"},{"type":{"names":["Number"]},"optional":true,"description":"<p>bitrate of the channel (voice only)</p>","name":"data.bitrate"},{"type":{"names":["Number"]},"optional":true,"description":"<p>user limit of a channel (voice only)</p>","name":"data.user_limit"},{"type":{"names":["Array.<PermissionOverwrite>"]},"optional":true,"description":"<p>permissions overwrites for the channel</p>","name":"data.permission_overwrites"}],"returns":[{"type":{"names":["Promise.<Channel>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure\">channel object</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_CHANNELS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"createGuildChannel","longname":"GuildMethods#createGuildChannel","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#createGuildChannel"},{"comment":"/**\n     * Attach a integration object from the user to the guild\n     * @param {String} guildId - Id of the guild\n     * @param {Object} data - Integration object with id and type properties\n     * @param {String} data.type - type of the integration\n     * @param {String} data.id - Id of the integration\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_GUILD       |    always |\n     */","meta":{"range":[23702,23858],"filename":"Guilds.js","lineno":535,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000610","name":"GuildMethods#createGuildIntegration","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Attach a integration object from the user to the guild</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["Object"]},"description":"<p>Integration object with id and type properties</p>","name":"data"},{"type":{"names":["String"]},"description":"<p>type of the integration</p>","name":"data.type"},{"type":{"names":["String"]},"description":"<p>Id of the integration</p>","name":"data.id"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_GUILD</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"createGuildIntegration","longname":"GuildMethods#createGuildIntegration","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#createGuildIntegration"},{"comment":"/**\n     * Create a new Role\n     * @param {String} guildId - Id of the guild\n     * @param {Object} [data] - data with role properties\n     * @param {String} [data.name] - name of the role\n     * @param {Number} [data.permissions] - Number created from combining permission bits\n     * @param {Number} [data.color] - rgb color of the role\n     * @param {Boolean} [data.hoist] - if the role should be displayed in the sidebar\n     * @param {Boolean} [data.mentionable] - if the role should be mentionable\n     * @returns {Promise.<Role>} [role](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_ROLES       |    always |\n     *\n     * @example\n     * // Create a role with the name \"Nice Role\" and a color of a soft blue\n     * let client = new SnowTransfer('TOKEN')\n     * let roleData = {\n     *   name: 'Nice Role',\n     *   color: 0x7c7cf8\n     * }\n     * client.guild.createGuildRole('guild Id', roleData)\n     */","meta":{"range":[18017,18159],"filename":"Guilds.js","lineno":404,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000425","name":"GuildMethods#createGuildRole","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Create a new Role</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["Object"]},"optional":true,"description":"<p>data with role properties</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>name of the role</p>","name":"data.name"},{"type":{"names":["Number"]},"optional":true,"description":"<p>Number created from combining permission bits</p>","name":"data.permissions"},{"type":{"names":["Number"]},"optional":true,"description":"<p>rgb color of the role</p>","name":"data.color"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>if the role should be displayed in the sidebar</p>","name":"data.hoist"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>if the role should be mentionable</p>","name":"data.mentionable"}],"returns":[{"type":{"names":["Promise.<Role>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure\">role</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_ROLES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// Create a role with the name \"Nice Role\" and a color of a soft blue\nlet client = new SnowTransfer('TOKEN')\nlet roleData = {\n  name: 'Nice Role',\n  color: 0x7c7cf8\n}\nclient.guild.createGuildRole('guild Id', roleData)"],"name":"createGuildRole","longname":"GuildMethods#createGuildRole","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#createGuildRole"},{"comment":"/**\n     * Delete a guild\n     *\n     * **Your bot has to be the owner of the guild to do this**\n     *\n     * **This action is irreversible, so use it with caution!**\n     * @param {String} guildId - Id of the guild\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     */","meta":{"range":[4644,4766],"filename":"Guilds.js","lineno":95,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000080","name":"GuildMethods#deleteGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Delete a guild</p>\n<p><strong>Your bot has to be the owner of the guild to do this</strong></p>\n<p><strong>This action is irreversible, so use it with caution!</strong></p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>"}],"name":"deleteGuild","longname":"GuildMethods#deleteGuild","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#deleteGuild"},{"comment":"/**\n     * Get a guild via Id\n     *\n     * **Your bot has to be a member of the guild for this function to work**\n     * @param {String} guildId - Id of the guild\n     * @returns {Promise.<Guild>} [Guild object](https://discordapp.com/developers/docs/resources/guild#guild-object)\n     */","meta":{"range":[2540,2656],"filename":"Guilds.js","lineno":51,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000040","name":"GuildMethods#getGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Get a guild via Id</p>\n<p><strong>Your bot has to be a member of the guild for this function to work</strong></p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<Guild>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/guild#guild-object\">Guild object</a></p>"}],"name":"getGuild","longname":"GuildMethods#getGuild","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#getGuild"},{"comment":"/**\n     * Get bans of a guild\n     * @param {String} guildId - Id of the guild\n     * @returns {Promise.<Ban[]>} - List of [bans](https://discordapp.com/developers/docs/resources/guild#ban-object-ban-structure)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | BAN_MEMBERS        |    always |\n     */","meta":{"range":[14534,14659],"filename":"Guilds.js","lineno":321,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000341","name":"GuildMethods#getGuildBans","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Get bans of a guild</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<Array.<Ban>>"]},"description":"<ul>\n<li>List of <a href=\"https://discordapp.com/developers/docs/resources/guild#ban-object-ban-structure\">bans</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BAN_MEMBERS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"getGuildBans","longname":"GuildMethods#getGuildBans","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#getGuildBans"},{"comment":"/**\n     * Get a list of channels for a guild\n     * @param {String} guildId - Id of the guild\n     * @returns {Promise.<Channel[]>} - list of [channels](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure)\n     */","meta":{"range":[5029,5162],"filename":"Guilds.js","lineno":104,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000099","name":"GuildMethods#getGuildChannels","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Get a list of channels for a guild</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<Array.<Channel>>"]},"description":"<ul>\n<li>list of <a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure\">channels</a></li>\n</ul>"}],"name":"getGuildChannels","longname":"GuildMethods#getGuildChannels","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#getGuildChannels"},{"comment":"/**\n     * Get the guild embed object\n     * @param {String} guildId - Id of the guild\n     * @returns {Promise.<Object>} [Guild Embed](https://discordapp.com/developers/docs/resources/guild#guild-embed-object)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_GUILD       |    always |\n     */","meta":{"range":[26372,26499],"filename":"Guilds.js","lineno":594,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000696","name":"GuildMethods#getGuildEmbed","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Get the guild embed object</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/guild#guild-embed-object\">Guild Embed</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_GUILD</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"getGuildEmbed","longname":"GuildMethods#getGuildEmbed","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#getGuildEmbed"},{"comment":"/**\n     * Get integrations for a guild\n     * @param {String} guildId - Id of the guild\n     * @returns {Promise.<Object[]>} List of [integration objects](https://discordapp.com/developers/docs/resources/guild#integration-object)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_GUILD       |    always |\n     */","meta":{"range":[23030,23171],"filename":"Guilds.js","lineno":519,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000591","name":"GuildMethods#getGuildIntegrations","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Get integrations for a guild</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<Array.<Object>>"]},"description":"<p>List of <a href=\"https://discordapp.com/developers/docs/resources/guild#integration-object\">integration objects</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_GUILD</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"getGuildIntegrations","longname":"GuildMethods#getGuildIntegrations","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#getGuildIntegrations"},{"comment":"/**\n     * Get invites for a guild\n     * @param {String} guildId - Id of the guild\n     * @returns {Promise.<Invite[]>} List of [invites](https://discordapp.com/developers/docs/resources/invite#invite-object) (with metadata)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_GUILD       |    always |\n     */","meta":{"range":[22521,22652],"filename":"Guilds.js","lineno":506,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000572","name":"GuildMethods#getGuildInvites","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Get invites for a guild</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<Array.<Invite>>"]},"description":"<p>List of <a href=\"https://discordapp.com/developers/docs/resources/invite#invite-object\">invites</a> (with metadata)</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_GUILD</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"getGuildInvites","longname":"GuildMethods#getGuildInvites","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#getGuildInvites"},{"comment":"/**\n     * Get a guild member via Id\n     * @param {String} guildId - Id of the guild\n     * @param {String} memberId - Id of the guild member\n     * @returns {Promise.<GuildMember>} - [guild member](https://discordapp.com/developers/docs/resources/guild#guild-member-object-guild-member-structure)\n     */","meta":{"range":[7025,7174],"filename":"Guilds.js","lineno":145,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000160","name":"GuildMethods#getGuildMember","type":"MethodDefinition","paramnames":["guildId","memberId"]},"vars":{"":null}},"description":"<p>Get a guild member via Id</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the guild member</p>","name":"memberId"}],"returns":[{"type":{"names":["Promise.<GuildMember>"]},"description":"<ul>\n<li><a href=\"https://discordapp.com/developers/docs/resources/guild#guild-member-object-guild-member-structure\">guild member</a></li>\n</ul>"}],"name":"getGuildMember","longname":"GuildMethods#getGuildMember","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#getGuildMember"},{"comment":"/**\n     * Get a list of guild members\n     * @param {String} guildId - Id of the guild\n     * @param {Object} [data] - query data\n     * @param {Number} [data.limit] - how many results should be returned\n     * @param {String} [data.after] - highest user Id after which results should be returned\n     * @returns {Promise.<GuildMember[]>} - list of [guild members](https://discordapp.com/developers/docs/resources/guild#guild-member-object-guild-member-structure)\n     */","meta":{"range":[7657,7805],"filename":"Guilds.js","lineno":157,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000181","name":"GuildMethods#getGuildMembers","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Get a list of guild members</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["Object"]},"optional":true,"description":"<p>query data</p>","name":"data"},{"type":{"names":["Number"]},"optional":true,"description":"<p>how many results should be returned</p>","name":"data.limit"},{"type":{"names":["String"]},"optional":true,"description":"<p>highest user Id after which results should be returned</p>","name":"data.after"}],"returns":[{"type":{"names":["Promise.<Array.<GuildMember>>"]},"description":"<ul>\n<li>list of <a href=\"https://discordapp.com/developers/docs/resources/guild#guild-member-object-guild-member-structure\">guild members</a></li>\n</ul>"}],"name":"getGuildMembers","longname":"GuildMethods#getGuildMembers","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#getGuildMembers"},{"comment":"/**\n     * Get the amount of members that would be pruned when a prune with the passed amount of days would be started\n     * @param {String} guildId - Id of the guild\n     * @param {Object} data - Object with a days property\n     * @param {Number} data.days - days to count prune for (min 1)\n     * @returns {Promise.<Object>} - Object with a \"pruned\" key indicating the amount of members that would be pruned\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | KICK_MEMBERS       |    always |\n     */","meta":{"range":[20946,21090],"filename":"Guilds.js","lineno":469,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000511","name":"GuildMethods#getGuildPruneCount","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Get the amount of members that would be pruned when a prune with the passed amount of days would be started</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["Object"]},"description":"<p>Object with a days property</p>","name":"data"},{"type":{"names":["Number"]},"description":"<p>days to count prune for (min 1)</p>","name":"data.days"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"<ul>\n<li>Object with a &quot;pruned&quot; key indicating the amount of members that would be pruned</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>KICK_MEMBERS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"getGuildPruneCount","longname":"GuildMethods#getGuildPruneCount","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#getGuildPruneCount"},{"comment":"/**\n     * Get a list of roles for a guild\n     * @param {String} guildId - Id of the guild\n     * @returns {Promise.<Role[]>} - array of [roles](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_ROLES       |    always |\n     */","meta":{"range":[16817,16944],"filename":"Guilds.js","lineno":376,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000406","name":"GuildMethods#getGuildRoles","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Get a list of roles for a guild</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<Array.<Role>>"]},"description":"<ul>\n<li>array of <a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure\">roles</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_ROLES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"getGuildRoles","longname":"GuildMethods#getGuildRoles","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#getGuildRoles"},{"comment":"/**\n     * Get a list of voice regions for the guild, includes vip-regions unlike voice.getVoiceRegions\n     * @param {String} guildId - Id of the guild\n     * @returns {Promise.<VoiceRegion[]>} List of [voice regions](https://discordapp.com/developers/docs/resources/voice#voice-region-object)\n     */","meta":{"range":[22006,22148],"filename":"Guilds.js","lineno":493,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000553","name":"GuildMethods#getGuildVoiceRegions","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Get a list of voice regions for the guild, includes vip-regions unlike voice.getVoiceRegions</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<Array.<VoiceRegion>>"]},"description":"<p>List of <a href=\"https://discordapp.com/developers/docs/resources/voice#voice-region-object\">voice regions</a></p>"}],"name":"getGuildVoiceRegions","longname":"GuildMethods#getGuildVoiceRegions","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#getGuildVoiceRegions"},{"comment":"/**\n     * Remove a ban of a user\n     * @param {String} guildId - Id of the guild\n     * @param {String} memberId - Id of the guild member\n     * @param {Object} [data] - object with a reason property\n     * @param {String} [data.reason] - Audit log reason for the remove of the ban\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | BAN_MEMBERS        |    always |\n     */","meta":{"range":[16272,16433],"filename":"Guilds.js","lineno":363,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000383","name":"GuildMethods#removeGuildBan","type":"MethodDefinition","paramnames":["guildId","memberId","data"]},"vars":{"":null}},"description":"<p>Remove a ban of a user</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the guild member</p>","name":"memberId"},{"type":{"names":["Object"]},"optional":true,"description":"<p>object with a reason property</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>Audit log reason for the remove of the ban</p>","name":"data.reason"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BAN_MEMBERS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"removeGuildBan","longname":"GuildMethods#removeGuildBan","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#removeGuildBan"},{"comment":"/**\n     * Delete a guild integratiom\n     * @param {String} guildId - Id of the guild\n     * @param {String} integrationId - Id of the integration\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_GUILD       |    always |\n     */","meta":{"range":[25288,25463],"filename":"Guilds.js","lineno":567,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000654","name":"GuildMethods#removeGuildIntegration","type":"MethodDefinition","paramnames":["guildId","integrationId"]},"vars":{"":null}},"description":"<p>Delete a guild integratiom</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the integration</p>","name":"integrationId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_GUILD</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"removeGuildIntegration","longname":"GuildMethods#removeGuildIntegration","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#removeGuildIntegration"},{"comment":"/**\n     * Remove a guild member (aka kick them)\n     * @param {String} guildId - Id of the guild\n     * @param {String} memberId - Id of the guild member\n     * @param {Object} [data] - object with reason property\n     * @param {String} [data.reason] - Audit log reason for the remove\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     *| Permissions needed | condition |\n     |--------------------|----------:|\n     | KICK_MEMBERS       |    always |\n     *\n     * @example\n     * // Kick a member with a reason of \"spam\"\n     * let client = new SnowTransfer('TOKEN')\n     * let kickData = {\n     *   reason: 'spam'\n     * }\n     * client.guild.removeGuildMember('guild Id', 'memberId', kickData)\n     */","meta":{"range":[14008,14175],"filename":"Guilds.js","lineno":308,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000318","name":"GuildMethods#removeGuildMember","type":"MethodDefinition","paramnames":["guildId","memberId","data"]},"vars":{"":null}},"description":"<p>Remove a guild member (aka kick them)</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the guild member</p>","name":"memberId"},{"type":{"names":["Object"]},"optional":true,"description":"<p>object with reason property</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>Audit log reason for the remove</p>","name":"data.reason"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>KICK_MEMBERS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// Kick a member with a reason of \"spam\"\nlet client = new SnowTransfer('TOKEN')\nlet kickData = {\n  reason: 'spam'\n}\nclient.guild.removeGuildMember('guild Id', 'memberId', kickData)"],"name":"removeGuildMember","longname":"GuildMethods#removeGuildMember","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#removeGuildMember"},{"comment":"/**\n     * Remove a role from a guild member\n     * @param {String} guildId - Id of the guild\n     * @param {String} memberId - Id of the guild member\n     * @param {String} roleId - Id of the role\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_ROLES       |    always |\n     */","meta":{"range":[13072,13252],"filename":"Guilds.js","lineno":284,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000295","name":"GuildMethods#removeGuildMemberRole","type":"MethodDefinition","paramnames":["guildId","memberId","roleId"]},"vars":{"":null}},"description":"<p>Remove a role from a guild member</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the guild member</p>","name":"memberId"},{"type":{"names":["String"]},"description":"<p>Id of the role</p>","name":"roleId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_ROLES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"removeGuildMemberRole","longname":"GuildMethods#removeGuildMemberRole","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#removeGuildMemberRole"},{"comment":"/**\n     * Delete a role from the guild\n     * @param {String} guildId - Id of the guild\n     * @param {String} roleId - Id of the role\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_ROLES       |    always |\n     */","meta":{"range":[20241,20388],"filename":"Guilds.js","lineno":454,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000490","name":"GuildMethods#removeGuildRole","type":"MethodDefinition","paramnames":["guildId","roleId"]},"vars":{"":null}},"description":"<p>Delete a role from the guild</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the role</p>","name":"roleId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_ROLES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"removeGuildRole","longname":"GuildMethods#removeGuildRole","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#removeGuildRole"},{"comment":"/**\n     * Start a prune\n     * @param {String} guildId - Id of the guild\n     * @param {Object} data - Object with a days property\n     * @param {Number} data.days - days to count prune for (min 1)\n     * @returns {Promise.<Object>} Object with a \"pruned\" key indicating the amount of members that were be pruned\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | KICK_MEMBERS       |    always |\n     */","meta":{"range":[21551,21693],"filename":"Guilds.js","lineno":484,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000532","name":"GuildMethods#startGuildPrune","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Start a prune</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["Object"]},"description":"<p>Object with a days property</p>","name":"data"},{"type":{"names":["Number"]},"description":"<p>days to count prune for (min 1)</p>","name":"data.days"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"<p>Object with a &quot;pruned&quot; key indicating the amount of members that were be pruned</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>KICK_MEMBERS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"startGuildPrune","longname":"GuildMethods#startGuildPrune","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#startGuildPrune"},{"comment":"/**\n     * Synchronize a guild integration\n     * @param {String} guildId - Id of the guild\n     * @param {String} integrationId - Id of the integration\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_GUILD       |    always |\n     */","meta":{"range":[25841,26014],"filename":"Guilds.js","lineno":581,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000675","name":"GuildMethods#syncGuildIntegration","type":"MethodDefinition","paramnames":["guildId","integrationId"]},"vars":{"":null}},"description":"<p>Synchronize a guild integration</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the integration</p>","name":"integrationId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_GUILD</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"syncGuildIntegration","longname":"GuildMethods#syncGuildIntegration","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#syncGuildIntegration"},{"comment":"/**\n     * Batch update the positions of channels\n     * @param {String} guildId - Id of the guild\n     * @param {Object[]} data\n     * @param {String} data[].id - Id of the channel\n     * @param {Number} data[].position - new position of the channel\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     */","meta":{"range":[6555,6708],"filename":"Guilds.js","lineno":135,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000139","name":"GuildMethods#updateChannelPositions","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Batch update the positions of channels</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["Array.<Object>"]},"name":"data"},{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"data[].id"},{"type":{"names":["Number"]},"description":"<p>new position of the channel</p>","name":"data[].position"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>"}],"name":"updateChannelPositions","longname":"GuildMethods#updateChannelPositions","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#updateChannelPositions"},{"comment":"/**\n     * Update a guild\n     * @param {String} guildId - Id of the guild\n     * @param {Object} data - data\n     * @param {String} [data.name] - name of the guild\n     * @param {String} [data.region] - guild [voice region](https://discordapp.com/developers/docs/resources/voice#voice-region-voice-region-structure) Id\n     * @param {Number} [data.verification_level] - guild [verification level](https://discordapp.com/developers/docs/resources/guild#guild-object-verification-level)\n     * @param {Number} [data.default_message_notifications] - message [notification setting](https://discordapp.com/developers/docs/resources/guild#default-message-notification-level)\n     * @param {String} [data.afk_channel_id] - Id of the afk channel\n     * @param {Number} [data.afk_timeout] - afk timeout in seconds\n     * @param {String} [data.icon] - base64 jpeg image of the guild icon\n     * @param {String} [data.owner_id] - Id of the owner user\n     * @param {String} [data.splash] - base64 jpeg image for the guild splash (vip/partner only)\n     * @returns {Promise.<Guild>} [Guild object](https://discordapp.com/developers/docs/resources/guild#guild-object)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_GUILD       |    always |\n     *\n     * @example\n     * // Update the name of a guild to \"Nice Guild\"\n     * let client = new SnowTransfer('TOKEN')\n     * let guildData = {\n     *   name: 'Nice Guild'\n     * }\n     * client.guild.updateGuild('guild Id', guildData)\n     */","meta":{"range":[4198,4331],"filename":"Guilds.js","lineno":82,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000059","name":"GuildMethods#updateGuild","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Update a guild</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["Object"]},"description":"<p>data</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>name of the guild</p>","name":"data.name"},{"type":{"names":["String"]},"optional":true,"description":"<p>guild <a href=\"https://discordapp.com/developers/docs/resources/voice#voice-region-voice-region-structure\">voice region</a> Id</p>","name":"data.region"},{"type":{"names":["Number"]},"optional":true,"description":"<p>guild <a href=\"https://discordapp.com/developers/docs/resources/guild#guild-object-verification-level\">verification level</a></p>","name":"data.verification_level"},{"type":{"names":["Number"]},"optional":true,"description":"<p>message <a href=\"https://discordapp.com/developers/docs/resources/guild#default-message-notification-level\">notification setting</a></p>","name":"data.default_message_notifications"},{"type":{"names":["String"]},"optional":true,"description":"<p>Id of the afk channel</p>","name":"data.afk_channel_id"},{"type":{"names":["Number"]},"optional":true,"description":"<p>afk timeout in seconds</p>","name":"data.afk_timeout"},{"type":{"names":["String"]},"optional":true,"description":"<p>base64 jpeg image of the guild icon</p>","name":"data.icon"},{"type":{"names":["String"]},"optional":true,"description":"<p>Id of the owner user</p>","name":"data.owner_id"},{"type":{"names":["String"]},"optional":true,"description":"<p>base64 jpeg image for the guild splash (vip/partner only)</p>","name":"data.splash"}],"returns":[{"type":{"names":["Promise.<Guild>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/guild#guild-object\">Guild object</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_GUILD</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// Update the name of a guild to \"Nice Guild\"\nlet client = new SnowTransfer('TOKEN')\nlet guildData = {\n  name: 'Nice Guild'\n}\nclient.guild.updateGuild('guild Id', guildData)"],"name":"updateGuild","longname":"GuildMethods#updateGuild","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#updateGuild"},{"comment":"/**\n     * Update a guild embed object\n     * @param {String} guildId - Id of the guild\n     * @param {Object} data - data\n     * @param {Boolean} data.enabled - if the embed is enabled\n     * @param {String} data.channel_id - channel Id of the embed\n     * @returns {Promise.<Object>} - [Guild Embed](https://discordapp.com/developers/docs/resources/guild#guild-embed-object)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_GUILD       |    always |\n     */","meta":{"range":[27023,27167],"filename":"Guilds.js","lineno":610,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000715","name":"GuildMethods#updateGuildEmbed","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Update a guild embed object</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["Object"]},"description":"<p>data</p>","name":"data"},{"type":{"names":["Boolean"]},"description":"<p>if the embed is enabled</p>","name":"data.enabled"},{"type":{"names":["String"]},"description":"<p>channel Id of the embed</p>","name":"data.channel_id"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"<ul>\n<li><a href=\"https://discordapp.com/developers/docs/resources/guild#guild-embed-object\">Guild Embed</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_GUILD</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"updateGuildEmbed","longname":"GuildMethods#updateGuildEmbed","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#updateGuildEmbed"},{"comment":"/**\n     * Update behaviour and settings of an [integration object](https://discordapp.com/developers/docs/resources/guild#integration-object)\n     * @param {String} guildId - Id of the guild\n     * @param {String} integrationId - Id of the integration\n     * @param {Object} data - Data with the properties listed below\n     * @param {Number} data.expire_behaviour - Behaviour when a integration subscription expires\n     * @param {Number} data.expire_grace_period - Time in seconds for how long to ignore expired subscriptions\n     * @param {Boolean} data.enable_emoticons - If emoticons should be synced for this integration (twitch only atm)\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_GUILD       |    always |\n     */","meta":{"range":[24729,24915],"filename":"Guilds.js","lineno":553,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000631","name":"GuildMethods#updateGuildIntegration","type":"MethodDefinition","paramnames":["guildId","integrationId","data"]},"vars":{"":null}},"description":"<p>Update behaviour and settings of an <a href=\"https://discordapp.com/developers/docs/resources/guild#integration-object\">integration object</a></p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the integration</p>","name":"integrationId"},{"type":{"names":["Object"]},"description":"<p>Data with the properties listed below</p>","name":"data"},{"type":{"names":["Number"]},"description":"<p>Behaviour when a integration subscription expires</p>","name":"data.expire_behaviour"},{"type":{"names":["Number"]},"description":"<p>Time in seconds for how long to ignore expired subscriptions</p>","name":"data.expire_grace_period"},{"type":{"names":["Boolean"]},"description":"<p>If emoticons should be synced for this integration (twitch only atm)</p>","name":"data.enable_emoticons"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_GUILD</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"updateGuildIntegration","longname":"GuildMethods#updateGuildIntegration","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#updateGuildIntegration"},{"comment":"/**\n     * Update properties of a guild member\n     *\n     * **Check the table below to make sure you have the right permissions for the types of updates**\n     *\n     * **Make sure that your bot has `CONNECT` and `MOVE_MEMBERS` on the channel you want to move the member to**\n     * @param {String} guildId - Id of the guild\n     * @param {String} memberId - Id of the guild member\n     * @param {Object} data - Updated properties\n     * @param {String} [data.nick] - updated nickname of the member (MANAGE_NICKNAMES)\n     * @param {String[]} [data.roles] - Array of Role Ids the member should have (MANAGE_ROLES)\n     * @param {Boolean} [data.mute] - if the member should be muted (MUTE_MEMBERS)\n     * @param {Boolean} [data.deaf] - if the member is deaf (DEAFEN_MEMBERS)\n     * @param {String} [data.channel_id] - channel to move the member to (if connected to voice) (CONNECT and MOVE_MEMBERS)\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed |    condition |\n     |--------------------|-------------:|\n     | MANAGE_NICKNAMES   | Nick Updates |\n     | MANAGE_ROLES       | Role Updates |\n     | MUTE_MEMBERS       | Mute Updates |\n     | DEAFEN_MEMBERS     | Deaf Updates |\n     | MOVE_MEMBERS       | Voice Move   |\n     *\n     * @example\n     * // Reset the nickname of a guild member\n     * let client = new SnowTransfer('TOKEN')\n     * let memberData = {\n     *   nick: \"\" // You can reset nicknames by providing an empty string as the value of data.nick\n     * }\n     * client.guild.updateGuildMember('guild Id', 'memberId', memberData)\n     */","meta":{"range":[11081,11247],"filename":"Guilds.js","lineno":231,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000227","name":"GuildMethods#updateGuildMember","type":"MethodDefinition","paramnames":["guildId","memberId","data"]},"vars":{"":null}},"description":"<p>Update properties of a guild member</p>\n<p><strong>Check the table below to make sure you have the right permissions for the types of updates</strong></p>\n<p><strong>Make sure that your bot has <code>CONNECT</code> and <code>MOVE_MEMBERS</code> on the channel you want to move the member to</strong></p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the guild member</p>","name":"memberId"},{"type":{"names":["Object"]},"description":"<p>Updated properties</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>updated nickname of the member (MANAGE_NICKNAMES)</p>","name":"data.nick"},{"type":{"names":["Array.<String>"]},"optional":true,"description":"<p>Array of Role Ids the member should have (MANAGE_ROLES)</p>","name":"data.roles"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>if the member should be muted (MUTE_MEMBERS)</p>","name":"data.mute"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>if the member is deaf (DEAFEN_MEMBERS)</p>","name":"data.deaf"},{"type":{"names":["String"]},"optional":true,"description":"<p>channel to move the member to (if connected to voice) (CONNECT and MOVE_MEMBERS)</p>","name":"data.channel_id"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_NICKNAMES</td>\n<td style=\"text-align:right\">Nick Updates</td>\n</tr>\n<tr>\n<td>MANAGE_ROLES</td>\n<td style=\"text-align:right\">Role Updates</td>\n</tr>\n<tr>\n<td>MUTE_MEMBERS</td>\n<td style=\"text-align:right\">Mute Updates</td>\n</tr>\n<tr>\n<td>DEAFEN_MEMBERS</td>\n<td style=\"text-align:right\">Deaf Updates</td>\n</tr>\n<tr>\n<td>MOVE_MEMBERS</td>\n<td style=\"text-align:right\">Voice Move</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// Reset the nickname of a guild member\nlet client = new SnowTransfer('TOKEN')\nlet memberData = {\n  nick: \"\" // You can reset nicknames by providing an empty string as the value of data.nick\n}\nclient.guild.updateGuildMember('guild Id', 'memberId', memberData)"],"name":"updateGuildMember","longname":"GuildMethods#updateGuildMember","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#updateGuildMember"},{"comment":"/**\n     * Update a guild role\n     * @param {String} guildId - Id of the guild\n     * @param {String} roleId - Id of the role\n     * @param {Object} data - updated properties of the role\n     * @param {String} [data.name] - new name of the role\n     * @param {Number} [data.permissions] - updated permission bit-set\n     * @param {Number} [data.color] - rgb color of the role\n     * @param {Boolean} [data.hoist] - if the role should be displayed in the sidebar\n     * @param {Boolean} [data.mentionable] - if the role should be mentionable\n     * @returns {Promise.<Role>} [Updated Role](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_ROLES       |    always |\n     */","meta":{"range":[19722,19880],"filename":"Guilds.js","lineno":440,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000467","name":"GuildMethods#updateGuildRole","type":"MethodDefinition","paramnames":["guildId","roleId","data"]},"vars":{"":null}},"description":"<p>Update a guild role</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["String"]},"description":"<p>Id of the role</p>","name":"roleId"},{"type":{"names":["Object"]},"description":"<p>updated properties of the role</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>new name of the role</p>","name":"data.name"},{"type":{"names":["Number"]},"optional":true,"description":"<p>updated permission bit-set</p>","name":"data.permissions"},{"type":{"names":["Number"]},"optional":true,"description":"<p>rgb color of the role</p>","name":"data.color"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>if the role should be displayed in the sidebar</p>","name":"data.hoist"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>if the role should be mentionable</p>","name":"data.mentionable"}],"returns":[{"type":{"names":["Promise.<Role>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure\">Updated Role</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_ROLES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"updateGuildRole","longname":"GuildMethods#updateGuildRole","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#updateGuildRole"},{"comment":"/**\n     * Batch modify the positions of roles\n     * @param {String} guildId - Id of the guild\n     * @param {Object[]} data - Array of objects with id and position properties\n     * @param {String} data[].id - Id of the role\n     * @param {Number} data[].position - new position of the role\n     * @returns {Promise.<Role[]>} - array of [roles](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure)\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | MANAGE_ROLES       |    always |\n     */","meta":{"range":[18744,18894],"filename":"Guilds.js","lineno":420,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000446","name":"GuildMethods#updateGuildRolePositions","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Batch modify the positions of roles</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["Array.<Object>"]},"description":"<p>Array of objects with id and position properties</p>","name":"data"},{"type":{"names":["String"]},"description":"<p>Id of the role</p>","name":"data[].id"},{"type":{"names":["Number"]},"description":"<p>new position of the role</p>","name":"data[].position"}],"returns":[{"type":{"names":["Promise.<Array.<Role>>"]},"description":"<ul>\n<li>array of <a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object-channel-structure\">roles</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_ROLES</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"updateGuildRolePositions","longname":"GuildMethods#updateGuildRolePositions","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#updateGuildRolePositions"},{"comment":"/**\n     * Update the nick of the current user\n     * @param {String} guildId - Id of the guild\n     * @param {Object} data - object with a nick property\n     * @param {String} data.nick - new nickname to use\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|----------:|\n     | CHANGE_NICKNAME    |    always |\n     *\n     * @example\n     * // change nick of bot to \"Nice Nick\"\n     * let client = new SnowTransfer('TOKEN')\n     * let nickData = {\n     *   nick: 'Nice Nick'\n     * }\n     * client.guild.updateSelf('guildId', nickData)\n     */","meta":{"range":[11906,12057],"filename":"Guilds.js","lineno":254,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000250","name":"GuildMethods#updateSelf","type":"MethodDefinition","paramnames":["guildId","data"]},"vars":{"":null}},"description":"<p>Update the nick of the current user</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"},{"type":{"names":["Object"]},"description":"<p>object with a nick property</p>","name":"data"},{"type":{"names":["String"]},"description":"<p>new nickname to use</p>","name":"data.nick"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CHANGE_NICKNAME</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// change nick of bot to \"Nice Nick\"\nlet client = new SnowTransfer('TOKEN')\nlet nickData = {\n  nick: 'Nice Nick'\n}\nclient.guild.updateSelf('guildId', nickData)"],"name":"updateSelf","longname":"GuildMethods#updateSelf","kind":"function","memberof":"GuildMethods","scope":"instance","async":true,"$longname":"GuildMethods#updateSelf"}],"$constructor":{"comment":"/**\n     * Create a new Guild Method Handler\n     *\n     * Usually SnowTransfer creates a method handler for you, this is here for completion\n     *\n     * You can access the methods listed via `client.guild.method`, where `client` is an initialized SnowTransfer instance\n     * @param {RequestHandler} requestHandler - request handler that calls the rest api\n     */","meta":{"range":[488,569],"filename":"Guilds.js","lineno":15,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000011","name":"GuildMethods","type":"MethodDefinition","paramnames":["requestHandler"]},"vars":{"":null}},"description":"<p>Create a new Guild Method Handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.guild.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"name":"GuildMethods","longname":"GuildMethods","kind":"class","scope":"global","undocumented":true,"$longname":"GuildMethods"}}],"symbols":["GuildMethods","GuildMethods#addGuildMember","GuildMethods#addGuildMemberRole","GuildMethods#createGuild","GuildMethods#createGuildBan","GuildMethods#createGuildChannel","GuildMethods#createGuildIntegration","GuildMethods#createGuildRole","GuildMethods#deleteGuild","GuildMethods#getGuild","GuildMethods#getGuildBans","GuildMethods#getGuildChannels","GuildMethods#getGuildEmbed","GuildMethods#getGuildIntegrations","GuildMethods#getGuildInvites","GuildMethods#getGuildMember","GuildMethods#getGuildMembers","GuildMethods#getGuildPruneCount","GuildMethods#getGuildRoles","GuildMethods#getGuildVoiceRegions","GuildMethods#removeGuildBan","GuildMethods#removeGuildIntegration","GuildMethods#removeGuildMember","GuildMethods#removeGuildMemberRole","GuildMethods#removeGuildRole","GuildMethods#startGuildPrune","GuildMethods#syncGuildIntegration","GuildMethods#updateChannelPositions","GuildMethods#updateGuild","GuildMethods#updateGuildEmbed","GuildMethods#updateGuildIntegration","GuildMethods#updateGuildMember","GuildMethods#updateGuildRole","GuildMethods#updateGuildRolePositions","GuildMethods#updateSelf"]},"Invites":{"documentation":[{"comment":"/**\n * Methods for interacting with invites\n */","meta":{"range":[92,1592],"filename":"Invites.js","lineno":6,"columnno":0,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000008","name":"InviteMethods","type":"ClassDeclaration","paramnames":["requestHandler"]}},"classdesc":"<p>Methods for interacting with invites</p>","name":"InviteMethods","longname":"InviteMethods","kind":"class","scope":"global","description":"<p>Create a new Invite Method Handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.invite.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"$longname":"InviteMethods","$members":[{"comment":"/**\n     * Delete an invite\n     * @param {String} inviteId\n     * @returns {Promise.<Invite>} [Invite Object](https://discordapp.com/developers/docs/resources/invite#invite-object)\n     *\n     * | Permissions needed | condition |\n     |--------------------|-----------:|\n     | MANAGE_CHANNELS    | always    |\n     */","meta":{"range":[1464,1590],"filename":"Invites.js","lineno":38,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000045","name":"InviteMethods#deleteInvite","type":"MethodDefinition","paramnames":["inviteId"]},"vars":{"":null}},"description":"<p>Delete an invite</p>","params":[{"type":{"names":["String"]},"name":"inviteId"}],"returns":[{"type":{"names":["Promise.<Invite>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/invite#invite-object\">Invite Object</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_CHANNELS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"deleteInvite","longname":"InviteMethods#deleteInvite","kind":"function","memberof":"InviteMethods","scope":"instance","async":true,"$longname":"InviteMethods#deleteInvite"},{"comment":"/**\n     * Get the invite data on an invite id\n     * @param {String} inviteId - Id of the invite\n     * @param {Boolean} [withCounts] - When set to true you get an invite object with additional `approximate_presence_count` and `approximate_member_count` fields\n     * @returns {Promise.<Invite>} [Invite Object](https://discordapp.com/developers/docs/resources/invite#invite-object)\n     */","meta":{"range":[975,1134],"filename":"Invites.js","lineno":25,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000022","name":"InviteMethods#getInvite","type":"MethodDefinition","paramnames":["inviteId","withCounts"]},"vars":{"":null}},"description":"<p>Get the invite data on an invite id</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the invite</p>","name":"inviteId"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>When set to true you get an invite object with additional <code>approximate_presence_count</code> and <code>approximate_member_count</code> fields</p>","name":"withCounts"}],"returns":[{"type":{"names":["Promise.<Invite>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/invite#invite-object\">Invite Object</a></p>"}],"name":"getInvite","longname":"InviteMethods#getInvite","kind":"function","memberof":"InviteMethods","scope":"instance","async":true,"$longname":"InviteMethods#getInvite"}],"$constructor":{"comment":"/**\n     * Create a new Invite Method Handler\n     *\n     * Usually SnowTransfer creates a method handler for you, this is here for completion\n     *\n     * You can access the methods listed via `client.invite.method`, where `client` is an initialized SnowTransfer instance\n     * @param {RequestHandler} requestHandler - request handler that calls the rest api\n     */","meta":{"range":[492,573],"filename":"Invites.js","lineno":15,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000011","name":"InviteMethods","type":"MethodDefinition","paramnames":["requestHandler"]},"vars":{"":null}},"description":"<p>Create a new Invite Method Handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.invite.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"name":"InviteMethods","longname":"InviteMethods","kind":"class","scope":"global","undocumented":true,"$longname":"InviteMethods"}}],"symbols":["InviteMethods","InviteMethods#deleteInvite","InviteMethods#getInvite"]},"Users":{"documentation":[{"comment":"/**\n * Methods for interacting with users\n */","meta":{"range":[90,3814],"filename":"Users.js","lineno":6,"columnno":0,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000008","name":"UserMethods","type":"ClassDeclaration","paramnames":["requestHandler"]}},"classdesc":"<p>Methods for interacting with users</p>","name":"UserMethods","longname":"UserMethods","kind":"class","scope":"global","description":"<p>Create a new User Method handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.user.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"name":"requestHandler"}],"$longname":"UserMethods","$members":[{"comment":"/**\n     * Create a direct message channel with another user\n     *\n     * **You can not create a dm with another bot**\n     * @param {String} userId - Id of the user to create the direct message channel with\n     * @returns {Promise.<Channel>} [DM channel](https://discordapp.com/developers/docs/resources/channel#channel-object)\n     *\n     * @example\n     * // Create a dm channel and send \"hi\" to it\n     * let client = new SnowTransfer('TOKEN');\n     * let channel = await client.user.createDirectMessageChannel('other user id')\n     * client.channel.createMessage(channel.id, 'hi')\n     */","meta":{"range":[3648,3812],"filename":"Users.js","lineno":96,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000135","name":"UserMethods#createDirectMessageChannel","type":"MethodDefinition","paramnames":["userId"]},"vars":{"":null}},"description":"<p>Create a direct message channel with another user</p>\n<p><strong>You can not create a dm with another bot</strong></p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the user to create the direct message channel with</p>","name":"userId"}],"returns":[{"type":{"names":["Promise.<Channel>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object\">DM channel</a></p>"}],"examples":["// Create a dm channel and send \"hi\" to it\nlet client = new SnowTransfer('TOKEN');\nlet channel = await client.user.createDirectMessageChannel('other user id')\nclient.channel.createMessage(channel.id, 'hi')"],"name":"createDirectMessageChannel","longname":"UserMethods#createDirectMessageChannel","kind":"function","memberof":"UserMethods","scope":"instance","async":true,"$longname":"UserMethods#createDirectMessageChannel"},{"comment":"/**\n     * Get direct messages of a user\n     *\n     * **Returns an empty array for bots**\n     * @returns {Promise.<Channel[]>} Array of [dm channels](https://discordapp.com/developers/docs/resources/channel#channel-object)\n     */","meta":{"range":[2918,3042],"filename":"Users.js","lineno":79,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000117","name":"UserMethods#getDirectMessages","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Get direct messages of a user</p>\n<p><strong>Returns an empty array for bots</strong></p>","returns":[{"type":{"names":["Promise.<Array.<Channel>>"]},"description":"<p>Array of <a href=\"https://discordapp.com/developers/docs/resources/channel#channel-object\">dm channels</a></p>"}],"name":"getDirectMessages","longname":"UserMethods#getDirectMessages","kind":"function","memberof":"UserMethods","scope":"instance","params":[],"async":true,"$longname":"UserMethods#getDirectMessages"},{"comment":"/**\n     * Get guilds of the current user\n     * @returns {Promise.<Guild[]>} Array of [partial guild objects](https://discordapp.com/developers/docs/resources/guild#guild-object)\n     */","meta":{"range":[2258,2372],"filename":"Users.js","lineno":60,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000079","name":"UserMethods#getGuilds","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Get guilds of the current user</p>","returns":[{"type":{"names":["Promise.<Array.<Guild>>"]},"description":"<p>Array of <a href=\"https://discordapp.com/developers/docs/resources/guild#guild-object\">partial guild objects</a></p>"}],"name":"getGuilds","longname":"UserMethods#getGuilds","kind":"function","memberof":"UserMethods","scope":"instance","params":[],"async":true,"$longname":"UserMethods#getGuilds"},{"comment":"/**\n     * Get information about current user\n     * @returns {Promise.<SelfUser>} [user object](https://discordapp.com/developers/docs/resources/user#user-object)\n     */","meta":{"range":[705,810],"filename":"Users.js","lineno":23,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000022","name":"UserMethods#getSelf","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Get information about current user</p>","returns":[{"type":{"names":["Promise.<SelfUser>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/user#user-object\">user object</a></p>"}],"name":"getSelf","longname":"UserMethods#getSelf","kind":"function","memberof":"UserMethods","scope":"instance","params":[],"async":true,"$longname":"UserMethods#getSelf"},{"comment":"/**\n     * Get information about a user via Id\n     * @param {String} userId - Id of the user\n     * @returns {Promise.<User>} [user object](https://discordapp.com/developers/docs/resources/user#user-object)\n     */","meta":{"range":[1036,1148],"filename":"Users.js","lineno":32,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000040","name":"UserMethods#getUser","type":"MethodDefinition","paramnames":["userId"]},"vars":{"":null}},"description":"<p>Get information about a user via Id</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the user</p>","name":"userId"}],"returns":[{"type":{"names":["Promise.<User>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/user#user-object\">user object</a></p>"}],"name":"getUser","longname":"UserMethods#getUser","kind":"function","memberof":"UserMethods","scope":"instance","async":true,"$longname":"UserMethods#getUser"},{"comment":"/**\n     * Leave a guild\n     * @param {String} guildId - Id of the guild\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     */","meta":{"range":[2542,2675],"filename":"Users.js","lineno":69,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000097","name":"UserMethods#leaveGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Leave a guild</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>"}],"name":"leaveGuild","longname":"UserMethods#leaveGuild","kind":"function","memberof":"UserMethods","scope":"instance","async":true,"$longname":"UserMethods#leaveGuild"},{"comment":"/**\n     * Update the current user\n     * @param {Object} data\n     * @param {String} [data.username] - Username to change\n     * @param {String} [data.avatar] - Base64 encoded avatar\n     * @returns {Promise.<SelfUser>} [user object](https://discordapp.com/developers/docs/resources/user#user-object)\n     *\n     * @example\n     * // update the avatar of the user\n     * let client = new SnowTransfer('TOKEN');\n     * let fileData = fs.readFileSync('new_avatar.png') // You should probably use fs.readFile, since it's asynchronous, synchronous methods may lag your bot.\n     * let updateData = {\n     *   avatar: `data:image/png;base64,${fileData.toString('base64')}` // base64 data url: data:mimetype;base64,base64String\n     * }\n     * client.user.updateSelf(updateData)\n     */","meta":{"range":[1940,2060],"filename":"Users.js","lineno":52,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000059","name":"UserMethods#updateSelf","type":"MethodDefinition","paramnames":["data"]},"vars":{"":null}},"description":"<p>Update the current user</p>","params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>Username to change</p>","name":"data.username"},{"type":{"names":["String"]},"optional":true,"description":"<p>Base64 encoded avatar</p>","name":"data.avatar"}],"returns":[{"type":{"names":["Promise.<SelfUser>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/user#user-object\">user object</a></p>"}],"examples":["// update the avatar of the user\nlet client = new SnowTransfer('TOKEN');\nlet fileData = fs.readFileSync('new_avatar.png') // You should probably use fs.readFile, since it's asynchronous, synchronous methods may lag your bot.\nlet updateData = {\n  avatar: `data:image/png;base64,${fileData.toString('base64')}` // base64 data url: data:mimetype;base64,base64String\n}\nclient.user.updateSelf(updateData)"],"name":"updateSelf","longname":"UserMethods#updateSelf","kind":"function","memberof":"UserMethods","scope":"instance","async":true,"$longname":"UserMethods#updateSelf"}],"$constructor":{"comment":"/**\n     * Create a new User Method handler\n     *\n     * Usually SnowTransfer creates a method handler for you, this is here for completion\n     *\n     * You can access the methods listed via `client.user.method`, where `client` is an initialized SnowTransfer instance\n     * @param {RequestHandler} requestHandler\n     */","meta":{"range":[442,523],"filename":"Users.js","lineno":15,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000011","name":"UserMethods","type":"MethodDefinition","paramnames":["requestHandler"]},"vars":{"":null}},"description":"<p>Create a new User Method handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.user.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"name":"requestHandler"}],"name":"UserMethods","longname":"UserMethods","kind":"class","scope":"global","undocumented":true,"$longname":"UserMethods"}}],"symbols":["UserMethods","UserMethods#createDirectMessageChannel","UserMethods#getDirectMessages","UserMethods#getGuilds","UserMethods#getSelf","UserMethods#getUser","UserMethods#leaveGuild","UserMethods#updateSelf"]},"Voices":{"documentation":[{"comment":"/**\n * Methods for interacting with voice stuff via rest\n */","meta":{"range":[105,956],"filename":"Voices.js","lineno":6,"columnno":0,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000008","name":"VoiceMethods","type":"ClassDeclaration","paramnames":["requestHandler"]}},"classdesc":"<p>Methods for interacting with voice stuff via rest</p>","name":"VoiceMethods","longname":"VoiceMethods","kind":"class","scope":"global","description":"<p>Create a new Voice Method Handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.voice.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"$longname":"VoiceMethods","$members":[{"comment":"/**\n     * Get currently available voice regions that can be used when creating servers\n     * @returns {Promise.<VoiceRegion[]>} Array of [voice region](https://discordapp.com/developers/docs/resources/voice#voice-region-object) objects\n     */","meta":{"range":[839,954],"filename":"Voices.js","lineno":23,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000022","name":"VoiceMethods#getVoiceRegions","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Get currently available voice regions that can be used when creating servers</p>","returns":[{"type":{"names":["Promise.<Array.<VoiceRegion>>"]},"description":"<p>Array of <a href=\"https://discordapp.com/developers/docs/resources/voice#voice-region-object\">voice region</a> objects</p>"}],"name":"getVoiceRegions","longname":"VoiceMethods#getVoiceRegions","kind":"function","memberof":"VoiceMethods","scope":"instance","params":[],"async":true,"$longname":"VoiceMethods#getVoiceRegions"}],"$constructor":{"comment":"/**\n     * Create a new Voice Method Handler\n     *\n     * Usually SnowTransfer creates a method handler for you, this is here for completion\n     *\n     * You can access the methods listed via `client.voice.method`, where `client` is an initialized SnowTransfer instance\n     * @param {RequestHandler} requestHandler - request handler that calls the rest api\n     */","meta":{"range":[502,583],"filename":"Voices.js","lineno":15,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000011","name":"VoiceMethods","type":"MethodDefinition","paramnames":["requestHandler"]},"vars":{"":null}},"description":"<p>Create a new Voice Method Handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.voice.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"name":"VoiceMethods","longname":"VoiceMethods","kind":"class","scope":"global","undocumented":true,"$longname":"VoiceMethods"}}],"symbols":["VoiceMethods","VoiceMethods#getVoiceRegions"]},"Webhooks":{"documentation":[{"comment":"/**\n * Methods for handling webhook interactiong\n */","meta":{"range":[97,7280],"filename":"Webhooks.js","lineno":6,"columnno":0,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000008","name":"WebhookMethods","type":"ClassDeclaration","paramnames":["requestHandler"]}},"classdesc":"<p>Methods for handling webhook interactiong</p>","name":"WebhookMethods","longname":"WebhookMethods","kind":"class","scope":"global","description":"<p>Create a new Method Handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.webhook.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"$longname":"WebhookMethods","$members":[{"comment":"/**\n     * Create a new Webhook\n     * @param {String} channelId - Id of the channel\n     * @param {Object} data - Object with webhook properties\n     * @param {String} data.name - name of the webhook\n     * @param {String} [data.avatar] - base 64 encoded avatar\n     * @returns {Promise.<Object>} [Webhook Object](https://discordapp.com/developers/docs/resources/webhook#webhook-object-webhook-structure)\n     *\n     * | Permissions needed | condition |\n     |--------------------|-----------:|\n     | MANAGE_WEBHOOKS    | always    |\n     *\n     * @example\n     * // Create a new Webhook with the name \"Webby Webhook\"\n     * let client = new SnowTransfer('TOKEN');\n     * let webhookData = {\n     *   name: \"Webby Webhook\"\n     * }\n     * client.webhook.createWebhook('channel Id', webhookData)\n     */","meta":{"range":[1388,1537],"filename":"Webhooks.js","lineno":39,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000022","name":"WebhookMethods#createWebhook","type":"MethodDefinition","paramnames":["channelId","data"]},"vars":{"":null}},"description":"<p>Create a new Webhook</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"},{"type":{"names":["Object"]},"description":"<p>Object with webhook properties</p>","name":"data"},{"type":{"names":["String"]},"description":"<p>name of the webhook</p>","name":"data.name"},{"type":{"names":["String"]},"optional":true,"description":"<p>base 64 encoded avatar</p>","name":"data.avatar"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/webhook#webhook-object-webhook-structure\">Webhook Object</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_WEBHOOKS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"examples":["// Create a new Webhook with the name \"Webby Webhook\"\nlet client = new SnowTransfer('TOKEN');\nlet webhookData = {\n  name: \"Webby Webhook\"\n}\nclient.webhook.createWebhook('channel Id', webhookData)"],"name":"createWebhook","longname":"WebhookMethods#createWebhook","kind":"function","memberof":"WebhookMethods","scope":"instance","async":true,"$longname":"WebhookMethods#createWebhook"},{"comment":"/**\n     * Delete a Webhook\n     * @param {String} webhookId - Id of the webhook\n     * @param {String} [token] - Webhook token\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     *\n     * | Permissions needed | condition |\n     |--------------------|---------------:|\n     | MANAGE_WEBHOOKS    | without token |\n     */","meta":{"range":[4695,4972],"filename":"Webhooks.js","lineno":117,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000160","name":"WebhookMethods#deleteWebhook","type":"MethodDefinition","paramnames":["webhookId","token"]},"vars":{"":null}},"description":"<p>Delete a Webhook</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the webhook</p>","name":"webhookId"},{"type":{"names":["String"]},"optional":true,"description":"<p>Webhook token</p>","name":"token"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_WEBHOOKS</td>\n<td style=\"text-align:right\">without token</td>\n</tr>\n</tbody>\n</table>"}],"name":"deleteWebhook","longname":"WebhookMethods#deleteWebhook","kind":"function","memberof":"WebhookMethods","scope":"instance","async":true,"$longname":"WebhookMethods#deleteWebhook"},{"comment":"/**\n     * Send a message via Webhook\n     * @param {String} webhookId - Id of the webhook\n     * @param {String} token - webhook token\n     * @param {Object} data - Webhook data to send\n     * @param {String} [data.content] - content of the message\n     * @param {?String} [data.username] - username to use for the webhook\n     * @param {?String} [data.avatar_url] - avatar url of the webhook\n     * @param {?Boolean} [data.tts] - send a text to speech message\n     * @param {Object} [data.file] - File, that should be uploaded\n     * @param {String} [data.file.name] - Name of the file\n     * @param {File} [data.file.file] - Buffer with file contents\n     * @param {Object[]} [data.embeds] - Array of [embed objects](https://discordapp.com/developers/docs/resources/channel#embed-object)\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     * @example\n     * // Send a message saying \"Hi from my webhook\" with a previously created webhook\n     * let client = new SnowTransfer('TOKEN');\n     * client.webhook.executeWebhook('webhook Id', 'webhook token', {content: 'Hi from my webhook'})\n     */","meta":{"range":[6110,6770],"filename":"Webhooks.js","lineno":143,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000198","name":"WebhookMethods#executeWebhook","type":"MethodDefinition","paramnames":["webhookId","token","data"]},"vars":{"":null}},"description":"<p>Send a message via Webhook</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the webhook</p>","name":"webhookId"},{"type":{"names":["String"]},"description":"<p>webhook token</p>","name":"token"},{"type":{"names":["Object"]},"description":"<p>Webhook data to send</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>content of the message</p>","name":"data.content"},{"type":{"names":["String"]},"optional":true,"nullable":true,"description":"<p>username to use for the webhook</p>","name":"data.username"},{"type":{"names":["String"]},"optional":true,"nullable":true,"description":"<p>avatar url of the webhook</p>","name":"data.avatar_url"},{"type":{"names":["Boolean"]},"optional":true,"nullable":true,"description":"<p>send a text to speech message</p>","name":"data.tts"},{"type":{"names":["Object"]},"optional":true,"description":"<p>File, that should be uploaded</p>","name":"data.file"},{"type":{"names":["String"]},"optional":true,"description":"<p>Name of the file</p>","name":"data.file.name"},{"type":{"names":["File"]},"optional":true,"description":"<p>Buffer with file contents</p>","name":"data.file.file"},{"type":{"names":["Array.<Object>"]},"optional":true,"description":"<p>Array of <a href=\"https://discordapp.com/developers/docs/resources/channel#embed-object\">embed objects</a></p>","name":"data.embeds"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>"}],"examples":["// Send a message saying \"Hi from my webhook\" with a previously created webhook\nlet client = new SnowTransfer('TOKEN');\nclient.webhook.executeWebhook('webhook Id', 'webhook token', {content: 'Hi from my webhook'})"],"name":"executeWebhook","longname":"WebhookMethods#executeWebhook","kind":"function","memberof":"WebhookMethods","scope":"instance","async":true,"$longname":"WebhookMethods#executeWebhook"},{"comment":"/**\n     * Execute a slack style Webhook\n     * @param {String} webhookId - Id of the Webhook\n     * @param {String} token - Webhook token\n     * @param {Object} data - Check [Slack's documentation](https://api.slack.com/incoming-webhooks)\n     * @returns {Promise.<void>} Resolves the Promise on successful execution\n     */","meta":{"range":[7106,7278],"filename":"Webhooks.js","lineno":163,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000292","name":"WebhookMethods#executeWebhookSlack","type":"MethodDefinition","paramnames":["webhookId","token","data"]},"vars":{"":null}},"description":"<p>Execute a slack style Webhook</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the Webhook</p>","name":"webhookId"},{"type":{"names":["String"]},"description":"<p>Webhook token</p>","name":"token"},{"type":{"names":["Object"]},"description":"<p>Check <a href=\"https://api.slack.com/incoming-webhooks\">Slack's documentation</a></p>","name":"data"}],"returns":[{"type":{"names":["Promise.<void>"]},"description":"<p>Resolves the Promise on successful execution</p>"}],"name":"executeWebhookSlack","longname":"WebhookMethods#executeWebhookSlack","kind":"function","memberof":"WebhookMethods","scope":"instance","async":true,"$longname":"WebhookMethods#executeWebhookSlack"},{"comment":"/**\n     * Get a single Webhook via Id\n     * @param {String} webhookId - Id of the webhook\n     * @param {String} [token] - Webhook token\n     * @returns {Promise.<Object>} [Webhook Object](https://discordapp.com/developers/docs/resources/webhook#webhook-object-webhook-structure)\n     *\n     * | Permissions needed | condition |\n     |--------------------|---------------:|\n     | MANAGE_WEBHOOKS    | without token |\n     */","meta":{"range":[3047,3315],"filename":"Webhooks.js","lineno":79,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000081","name":"WebhookMethods#getWebhook","type":"MethodDefinition","paramnames":["webhookId","token"]},"vars":{"":null}},"description":"<p>Get a single Webhook via Id</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the webhook</p>","name":"webhookId"},{"type":{"names":["String"]},"optional":true,"description":"<p>Webhook token</p>","name":"token"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"<p><a href=\"https://discordapp.com/developers/docs/resources/webhook#webhook-object-webhook-structure\">Webhook Object</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_WEBHOOKS</td>\n<td style=\"text-align:right\">without token</td>\n</tr>\n</tbody>\n</table>"}],"name":"getWebhook","longname":"WebhookMethods#getWebhook","kind":"function","memberof":"WebhookMethods","scope":"instance","async":true,"$longname":"WebhookMethods#getWebhook"},{"comment":"/**\n     * Get webhooks created within a channel\n     * @param {String} channelId - Id of the channel\n     * @returns {Promise.<Object[]>} Array of [Webhook Objects](https://discordapp.com/developers/docs/resources/webhook#webhook-object-webhook-structure)\n     *\n     * | Permissions needed | condition |\n     |--------------------|-----------:|\n     | MANAGE_WEBHOOKS    | always    |\n     */","meta":{"range":[1942,2083],"filename":"Webhooks.js","lineno":52,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000043","name":"WebhookMethods#getWebhooksChannel","type":"MethodDefinition","paramnames":["channelId"]},"vars":{"":null}},"description":"<p>Get webhooks created within a channel</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the channel</p>","name":"channelId"}],"returns":[{"type":{"names":["Promise.<Array.<Object>>"]},"description":"<p>Array of <a href=\"https://discordapp.com/developers/docs/resources/webhook#webhook-object-webhook-structure\">Webhook Objects</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_WEBHOOKS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"getWebhooksChannel","longname":"WebhookMethods#getWebhooksChannel","kind":"function","memberof":"WebhookMethods","scope":"instance","async":true,"$longname":"WebhookMethods#getWebhooksChannel"},{"comment":"/**\n     * Get all webhooks within a guild\n     * @param {String} guildId - Id of the guild\n     * @returns {Promise.<Object>} Array of [Webhook Objects](https://discordapp.com/developers/docs/resources/webhook#webhook-object-webhook-structure)\n     *\n     * | Permissions needed | condition |\n     |--------------------|-----------:|\n     | MANAGE_WEBHOOKS    | always    |\n     */","meta":{"range":[2476,2609],"filename":"Webhooks.js","lineno":65,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000062","name":"WebhookMethods#getWebhooksGuild","type":"MethodDefinition","paramnames":["guildId"]},"vars":{"":null}},"description":"<p>Get all webhooks within a guild</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the guild</p>","name":"guildId"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"<p>Array of <a href=\"https://discordapp.com/developers/docs/resources/webhook#webhook-object-webhook-structure\">Webhook Objects</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_WEBHOOKS</td>\n<td style=\"text-align:right\">always</td>\n</tr>\n</tbody>\n</table>"}],"name":"getWebhooksGuild","longname":"WebhookMethods#getWebhooksGuild","kind":"function","memberof":"WebhookMethods","scope":"instance","async":true,"$longname":"WebhookMethods#getWebhooksGuild"},{"comment":"/**\n     * Update a webhook\n     * @param {String} webhookId - Id of the webhook\n     * @param {String} [token] - Webhook token\n     * @param {Object} data - Updated Webhook properties\n     * @param {String} [data.name] - New default name of the webhook\n     * @param {String} [data.avatar] - Updated base 64 image for the default avatar\n     * @param {String} [data.channel_id] - Id of the new channel of the webhook\n     * @returns {Promise.<Object>} Updated [Webhook Object](https://discordapp.com/developers/docs/resources/webhook#webhook-object-webhook-structure)\n     *\n     * | Permissions needed | condition |\n     |--------------------|---------------:|\n     | MANAGE_WEBHOOKS    | without token |\n     */","meta":{"range":[4040,4333],"filename":"Webhooks.js","lineno":100,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000119","name":"WebhookMethods#updateWebhook","type":"MethodDefinition","paramnames":["webhookId","token","data"]},"vars":{"":null}},"description":"<p>Update a webhook</p>","params":[{"type":{"names":["String"]},"description":"<p>Id of the webhook</p>","name":"webhookId"},{"type":{"names":["String"]},"optional":true,"description":"<p>Webhook token</p>","name":"token"},{"type":{"names":["Object"]},"description":"<p>Updated Webhook properties</p>","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"<p>New default name of the webhook</p>","name":"data.name"},{"type":{"names":["String"]},"optional":true,"description":"<p>Updated base 64 image for the default avatar</p>","name":"data.avatar"},{"type":{"names":["String"]},"optional":true,"description":"<p>Id of the new channel of the webhook</p>","name":"data.channel_id"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"<p>Updated <a href=\"https://discordapp.com/developers/docs/resources/webhook#webhook-object-webhook-structure\">Webhook Object</a></p>\n<table>\n<thead>\n<tr>\n<th>Permissions needed</th>\n<th style=\"text-align:right\">condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MANAGE_WEBHOOKS</td>\n<td style=\"text-align:right\">without token</td>\n</tr>\n</tbody>\n</table>"}],"name":"updateWebhook","longname":"WebhookMethods#updateWebhook","kind":"function","memberof":"WebhookMethods","scope":"instance","async":true,"$longname":"WebhookMethods#updateWebhook"}],"$constructor":{"comment":"/**\n     * Create a new Method Handler\n     *\n     * Usually SnowTransfer creates a method handler for you, this is here for completion\n     *\n     * You can access the methods listed via `client.webhook.method`, where `client` is an initialized SnowTransfer instance\n     * @param {RequestHandler} requestHandler - request handler that calls the rest api\n     */","meta":{"range":[492,573],"filename":"Webhooks.js","lineno":15,"columnno":4,"path":"/home/travis/build/DasWolke/SnowTransfer/src/methods","code":{"id":"astnode100000011","name":"WebhookMethods","type":"MethodDefinition","paramnames":["requestHandler"]},"vars":{"":null}},"description":"<p>Create a new Method Handler</p>\n<p>Usually SnowTransfer creates a method handler for you, this is here for completion</p>\n<p>You can access the methods listed via <code>client.webhook.method</code>, where <code>client</code> is an initialized SnowTransfer instance</p>","params":[{"type":{"names":["RequestHandler"]},"description":"<p>request handler that calls the rest api</p>","name":"requestHandler"}],"name":"WebhookMethods","longname":"WebhookMethods","kind":"class","scope":"global","undocumented":true,"$longname":"WebhookMethods"}}],"symbols":["WebhookMethods","WebhookMethods#createWebhook","WebhookMethods#deleteWebhook","WebhookMethods#executeWebhook","WebhookMethods#executeWebhookSlack","WebhookMethods#getWebhook","WebhookMethods#getWebhooksChannel","WebhookMethods#getWebhooksGuild","WebhookMethods#updateWebhook"]}},"app":{"title":"SnowTransfer","base":"/SnowTransfer/","entrance":"content:index","routing":{"method":"query","caseSensitive":true},"server":"github","meta":null},"template":{"name":"Docma Default Template","version":"1.7.0","author":"Onur Yıldırım (onur@cutepilot.com)","license":"MIT","main":"index.html","options":{"navItems":[{"label":"Home","href":"?content=index"},{"label":"Documentation","iconClass":"ico ico-book","items":[{"label":"Client","href":"?api=SnowTransfer"},{"label":"AuditLog","href":"?api=AuditLog"},{"label":"Bots","href":"?api=Bots"},{"label":"Channels","href":"?api=Channels"},{"label":"Emojis","href":"?api=Emojis"},{"label":"Guilds","href":"?api=Guilds"},{"label":"Invites","href":"?api=Invites"},{"label":"Users","href":"?api=Users"},{"label":"Voices","href":"?api=Voices"},{"label":"Webhooks","href":"?api=Webhooks"}]},{"label":"GitHub","href":"https://github.com/DasWolke/SnowTransfer","target":"_blank","iconClass":"ico-md ico-github"}],"title":"","sidebar":true,"collapsed":false,"outline":"flat","badges":true,"symbolMeta":false,"search":true,"navbar":true}},"_":{"partials":{"api":"docma-api","content":"docma-content","notFound":"docma-404"},"elementID":"docma-main","contentElementID":"docma-content","logsEnabled":false}};
!function(){var e={};e.createChild=function(e,t,n){n=n||{};var o=document.createElement(t||"div");return Object.keys(n).forEach(function(e){o[e]=n[e]}),e.appendChild(o),o},e.getDocmaElem=function(){var t=document.getElementById(docma._.elementID);return t||(t=e.createChild(document.body,"div",{id:docma._.elementID})),t},e.getContentElem=function(){var e=document.getElementById(docma._.contentElementID);if(!e)throw new Error("Partial "+docma._.partials.content+' should have an element with id="'+docma._.contentElementID+'".');return e},e.loadCompiledContent=function(t){e.getDocmaElem().innerHTML=t},e.loadContent=function(t){e.getContentElem().innerHTML=t,e.scrollTo()},e.getOffset=function(e){var t="object"==typeof e?e:document.getElementById(e);if(t){var n=t.getBoundingClientRect();if(n.width||n.height||t.getClientRects().length){var o=document.documentElement;return{top:n.top+window.pageYOffset-o.clientTop,left:n.left+window.pageXOffset-o.clientLeft}}}},e.scrollTo=function(t){if(!(t=(t||window.location.hash||"").replace(/^#/,"")))return void(document.body.scrollTop=0);var n=document.getElementById(t);n&&(document.body.scrollTop=e.getOffset(n).top)},e.fixAnchors=function(){docma.app.base&&setTimeout(function(){var e,t,n=document.querySelectorAll('a[href^="#"]');for(e=0;e<n.length;e++){t=n[e];var o=t.getAttribute("href");"#"===o.slice(0,1)&&o.length>1&&(o=window.location.pathname+(window.location.search||"")+o,t.setAttribute("href",o))}},50)},docma.dom=Object.freeze(e)}();
!function(){dust.filters=dust.filters||{},dust.filters.$pt=function(t){return docma.utils.parseTicks(t)},dust.filters.$pnl=function(t){return docma.utils.parseNewLines(t,{keepIfSingle:!0})},dust.filters.$pl=function(t){return docma.utils.parseLinks(t)},dust.filters.$tl=function(t){return docma.utils.trimLeft(t)},dust.filters.$p=function(t){return docma.utils.parse(t,{keepIfSingle:!0})},dust.filters.$nt=function(t){return docma.utils.normalizeTabs(t)},dust.filters.$desc=function(t){return docma.utils.parse(t.classdesc||t.description||"")},dust.filters.$def=function(t){return t.optional?String(t.defaultvalue):""};var t=/true|false|null|undefined|Infinity|NaN|\d+|Number\.\w+|Math\.(PI|E|LN(2|10)|LOG(2|10)E|SQRT(1_)?2)|\[.*?]|\{.*?}|new [a-zA-Z]+.*|\/.+\/[gmiu]*|Date\.(now\(\)|UTC\(.*)|window|document/;dust.filters.$val=function(e){var n=docma.utils.notate(e,"meta.code.value");if(void 0===n)return"";if("string"!=typeof n)return n;var i=docma.utils.notate(e,"type.names")||[];return!/['"`]/.test(n.slice(0,1))&&i.indexOf("String")>=0&&(1===i.length||-1===t.indexOf(n))?'"'+n+'"':n},dust.filters.$id=function(t){var e;if("string"==typeof t)e=t;else{e=(docma.utils.isConstructor(t)?"new-":"")+t.$longname}return e.replace(/ /g,"-")}}();
!function(){function o(o,e,n){return e?(o&&"/"!==e.slice(0,1)&&(e="/"+e),n&&"/"!==e.slice(-1)&&(e+="/"),e):o||n?"/":""}function e(o,e){e=void 0===e?window.location.search||"":e,"?"===e.slice(0,1)&&(e=e.slice(1)),o=o.replace(/[\[\]]/g,"\\$&");var n=new RegExp("&?"+o+"(=([^&#]*)|&|#|$)"),a=n.exec(e);return a&&a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):""}Object.defineProperty(docma,"location",{configurable:!1,get:function(){var n=o(!0,window.location.pathname,!0),a=o(!0,docma.app.base,!0),c=n;return n.slice(0,a.length)===a&&(c=n.slice(a.length-1,n.length)),{host:window.location.host,hostname:window.location.hostname,origin:window.location.origin,port:window.location.port,protocol:(window.location.protocol||"").replace(/:$/,""),entrance:o(!0,docma.app.entrance,!1),base:a,hash:(window.location.hash||"").replace(/^#/,""),query:(window.location.search||"").replace(/^\?/,""),href:window.location.href,fullpath:n,pathname:c,path:c+(window.location.search||""),getQuery:e}}}),docma.location=Object.freeze(docma.location)}();
!function(){function e(e){return e&&""!==e.trim()?e:null}function n(e){return(e||"").replace(/([^>]+>)?~?(.*)/,"$2")}function t(e){return e}var r={};r.notate=function(e,n){if("object"==typeof e){var t,i=Array.isArray(n)?n:n.split("."),a=i[0];if(a)return t=e[a],i.length>1?(i.shift(),r.notate(t,i)):t}},r.getName=function(e){if(e.alias){var t=n(r.notate(e,"meta.code.name")||"");if(t)return t.replace(/.*?[#.~:](\w+)$/i,"$1")}return e.name},r.getLongName=function(e){var t=n(e.longname);if(e.alias){var i=n(r.notate(e,"meta.code.name")||"");if(!i)return t;var a=n(e.memberof||"");if(!a)return i;var o=new RegExp("^"+a+"[#\\.~:]"),s="instance"===e.scope?"#":".";return o.test(i)?i:a+s+i}return t},r.getFullName=r.getLongName,r.getCodeName=function(e){return n(r.notate(e,"meta.code.name")||"")||r.getLongName(e)},r.getSymbolByName=function(e,n){var t,i;for(t=0;t<e.length;t++){if(i=e[t],i.name===n||i.longname===n||r.getFullName(i)===n)return i;if(i.$members){var a=r.getSymbolByName(i.$members,n);if(a)return a}}return null},r.isDeprecated=function(e){return e.deprecated},r.isGlobal=function(e){return"global"===e.scope},r.isNamespace=function(e){return"namespace"===e.kind},r.isModule=function(e){return"module"===e.kind},r.isClass=function(e){return!r.isConstructor(e)&&("class"===e.kind||"ClassDeclaration"===r.notate(e,"meta.code.type"))},r.isConstructor=function(e){return"class"===e.kind&&"MethodDefinition"===r.notate(e,"meta.code.type")},r.isStaticMember=function(e){return"static"===e.scope},r.isStatic=r.isStaticMember,r.isInner=function(e){return"inner"===e.scope},r.isInstanceMember=function(e){return"instance"===e.scope},r.isMethod=function(e){var n=r.notate(e,"meta.code.type");return"function"===e.kind||"MethodDefinition"===n||"FunctionExpression"===n},r.isFunction=r.isMethod,r.isInstanceMethod=function(e){return r.isInstanceMember(e)&&r.isMethod(e)},r.isStaticMethod=function(e){return r.isStaticMember(e)&&r.isMethod(e)},r.isProperty=function(e){return"member"===e.kind},r.isInstanceProperty=function(e){return r.isInstanceMember(e)&&r.isProperty(e)},r.isStaticProperty=function(e){return r.isStaticMember(e)&&r.isProperty(e)},r.isTypeDef=function(e){return"typedef"===e.kind},r.isCustomType=r.isTypeDef,r.isEnum=function(e){return e.isEnum},r.isReadOnly=function(e){return e.readonly},r.isPublic=function(e){return"string"!=typeof e.access||"public"===e.access},r.isPrivate=function(e){return"private"===e.access},r.isProtected=function(e){return"protected"===e.access},r.isUndocumented=function(e){return!e.comments},r.hasDescription=function(n){return Boolean(e(n.classdesc)||e(n.description))},r.getTypes=function(e){if("class"===e.kind)return"class";var n=r.notate(e,"type.names")||[];return n=n.map(function(e){return e.replace(/\.</g,"<")}).join("|"),e.isEnum?"enum<"+n+">":n},r.getReturnTypes=function(e){var n=e.returns;if(!Array.isArray(n))return"void";var t,i=n.reduce(function(e,n){return t=r.notate(n,"type.names"),Array.isArray(t)?e.concat(t):e},[]);return i.length>0?i.join("|"):"void"},r.trimLeft=function(e){return e.replace(/^[\s\n\r\-—]*/,"")},r.parseTicks=function(e){return e.replace(/(```\s*)([\s\S]*?)(\s*```)/g,function(e,n,t){return r.normalizeTabs(r._wrapEscapeCode(t,!0).replace(/`/g,"&#x60;"))}).replace(/(`)(.*?)(`)/g,function(e,n,t){return r._wrapEscapeCode(t)})},r.parseNewLines=function(e,n){return n=n||{},r._tokenize(e,function(e,t){if(t)return e;var r=e.split(/[\r\n]{2,}/);return r.length<=1&&n.keepIfSingle?e:r.map(function(e){return"<p>"+e+"</p>"}).join("")}).join("")},r.parseLinks=function(e,n){n=n||{};var t=/\{@link +([^}]*?)\}/g,i=e.replace(t,function(e,t){var r,i,a=t.split("|");return 1===a.length?r=i=a[0].trim():(r=a[0].trim(),i=a[1].trim()),'<a href="'+r+'"'+(n.target?' target="'+n.target+'"':"")+">"+i+"</a>"});return r.parseTicks(i)},r.parse=function(e,n){return n=n||{},e=r.trimLeft(e),e=r.parseNewLines(e,n),e=r.parseTicks(e),r.parseLinks(e,n)},r.normalizeTabs=function(e){var n=e.match(/^\s*/gm),t=1/0;if(n.forEach(function(e,n){e=e.replace(/\t/g,"  "),n>0&&(t=Math.min(e.length,t))}),t!==1/0){var r=new RegExp("^\\s{"+t+"}","g");e=e.replace(r,"")}e=e.replace(/^\s*/,"");var i;return e.replace(/([\r\n]+)(\s+)/gm,function(e,n,t){return i=t.replace(/\t/g,"  "),i=new Array(i.length-i.length%2+1).join(" "),n+i})},r.getKeywords=function(e){if("string"==typeof e)return e.toLowerCase();var n=r.getFullName(e)+" "+e.longname+" "+e.name+" "+(e.alias||"")+" "+(e.memberOf||"")+" "+(e.kind||"")+" "+(e.scope||"")+" "+(e.classdesc||"")+" "+(e.description||"")+" "+(e.filename||"")+" "+(e.readonly?"readonly":"")+(e.isEnum?"enum":"");return r.isConstructor(e)&&(n+=" constructor"),r.isMethod(e)&&(n+=" method"),r.isProperty(e)&&(n+=" property"),n.replace(/[><"'`\n\r]/g,"").toLowerCase()},r.getCodeFileInfo=function(e){return{filename:r.notate(e,"meta.filename"),lineno:r.notate(e,"meta.lineno"),path:r.notate(e,"meta.path")}},r.listType=function(e){return e.map(function(e){return r._wrapEscapeCode(e)}).join(", ")},r.listTypeDesc=function(e){if(!e||0===e.length)return"";var n,t=e.map(function(e){return n=r.parse(e.description||"",{keepIfSingle:!0}),n&&(n="&nbsp;&nbsp;—&nbsp;&nbsp;"+n),r._wrapEscapeCode(e.type.names.join("|"))+n});return t.length>1?"<ul>\n"+t.join("</li>\n<li>")+"\n</ul>":t},r._find=function(e,n){if(!e||!n)return null;var t,r,i=null;for(t=0;t<e.length;t++)if((r=e[t])&&"object"==typeof r){for(var a in n)if(void 0!==n[a]&&n.hasOwnProperty(a)){if(n[a]!==r[a]){i=null;break}i=r}if(i)break}return i},r._assign=function(e,n,t){e=e||{};var r;for(r in n)n.hasOwnProperty(r)&&(t?Object.defineProperty(e,r,{enumerable:!0,value:n[r]}):e[r]=n[r]);return e},r._values=function(e){if(Array.isArray(e))return e;var n,t=[];for(n in e)e.hasOwnProperty(n)&&t.push(e[n]);return t},r._wrapEscapeCode=function(e,n){return e=e.replace(/</g,"&lt;").replace(/>/g,"&gt;"),e="<code>"+e+"</code>",n?"<pre>"+e+"</pre>":e},r._tokenize=function(e,n){"function"!=typeof n&&(n=t);if(e.indexOf("```")<0)return[n(e,!1)];var r,i="```".length,a="",o="",s=[],u=!1;for(r=0;r<e.length;r++)a+=e[r],o+=e[r],a.length>i&&(a=a.slice(-i)),"```"===a&&(u=!u,u?(s.push(n(o.slice(0,-i),!1)),o=a):(s.push(n(o,!0)),o=""));return s},docma.utils=r}();
!function(){function t(t,e){l.info("Event:",t,e?e[0]:""),y.trigger(t,e)}function e(t,n){if(n&&!(u.indexOf(n)<0)){if(t)docma.app.routing.caseSensitive||(t=t.toLowerCase());else{if(n!==e.Type.API)return;t=f}var o=p._find(docma.routes,{type:n,name:t});o&&p._assign(this,o)}}function n(t,e){dust.render(t,docma,function(t,n){if(t)throw t;m.loadCompiledContent(n),"function"==typeof e&&e()})}function o(){t(docma.Event.Render,[docma.currentRoute]),d&&(t(docma.Event.Ready),d=!1)}function r(o,r){docma._.currentRoute=e.create(null),n(docma._.partials.notFound,function(){if(t(docma.Event.Render,[null]),m.scrollTo(),"function"==typeof r)return r(404);throw new Error("Page or content not found for route: "+JSON.stringify(o))})}function a(){if(s){var t=sessionStorage.getItem("redirectPath")||null;if(t)return sessionStorage.removeItem("redirectPath"),l.info("Redirecting to:",t),page.redirect(t),!0}return!1}function i(t){var e=t||window.location.search;return/^[?&]/.test(e)&&(e=e.slice(1)),e||null}var c,u,d=!1,s="path"===docma.app.routing.method,f="_def_",p=docma.utils,m=docma.dom,l={};["log","info","warn","error"].forEach(function(t){!function(){l[t]=function(){docma._.logsEnabled&&console[t].apply(console,arguments)}}()}),docma.addFilter=function(t,e){if(docma.filterExists(t))throw new Error('Filter "'+t+'" already exists.');return dust.filters[t]=e,docma},docma.removeFilter=function(t){return delete dust.filters[t],docma},docma.filterExists=function(t){return"function"==typeof dust.filters[t]};var y=new EventEmitter;docma.Event={Ready:"ready",Render:"render",Route:"route"},docma.on=function(t,e){return y.on.apply(y,arguments),docma},docma.once=function(){return y.once.apply(y,arguments),docma},docma.off=function(){return y.off.apply(y,arguments),docma},docma.addListener=docma.on,docma.addListenerOnce=docma.once,docma.removeListener=docma.off,Object.defineProperty(docma,"currentRoute",{configurable:!1,get:function(){return docma._.currentRoute}}),Object.defineProperty(docma,"documentation",{configurable:!1,get:function(){return docma._.documentation}}),Object.defineProperty(docma,"symbols",{configurable:!1,get:function(){return docma._.symbols}}),e.Type={API:"api",CONTENT:"content"},u=p._values(e.Type),e.prototype.exists=function(){return Boolean(this.id)},e.prototype.isEqualTo=function(t){return!!(t&&t.exists()&&this.exists())&&t.path===this.path},e.prototype.isCurrent=function(){return this.isEqualTo(docma.currentRoute)},e.prototype.apply=function(){return this.type===e.Type.API?(docma._.documentation=docma.apis[this.name].documentation,docma._.symbols=docma.apis[this.name].symbols):(docma._.documentation=null,docma._.symbols=null),t(docma.Event.Route,[this]),docma.render(this),this},e.prototype.toString=function(){return JSON.stringify(this)},e.create=function(t,n){return new e(t,n)},e.fromID=function(t){if("string"!=typeof t)return l.warn("Route ID is not a string: "+t),new e(null);var n=t.split(":");return new e(n[1],n[0])},e.fromQuery=function(t){if(!t)return new e(null);var n=t.split("&")[0].split("="),o=n[0].toLowerCase();return new e(n[1],o)},Object.defineProperty(docma,"Route",{configurable:!1,get:function(){return e}}),docma.fetch=function(t,e){var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4===n.readyState){var o=200===n.status?n.responseText:"";return l.log("XHR GET:",n.status,t),e(n.status,o)}},n.open("GET",t,!0),n.send()},docma.render=function(t,a){if(!t||!t.exists())return r(t,a);if(!t.isEqualTo(docma.currentRoute)){docma._.currentRoute=t;var i="function"==typeof a;t.type===e.Type.API?n(docma._.partials.api,function(){o(),i&&a(200),m.fixAnchors(),m.scrollTo()}):docma.fetch(t.contentPath,function(e,c){if(404===e)return r(t,a);n(docma._.partials.content,function(){m.loadContent(c),o(),i&&a(e),m.fixAnchors()})})}},docma.app.base&&page.base(docma.app.base),page.redirect("(/)?"+docma.template.main,""),s&&(page("(/)?api/:apiName?",function(t,n){var o=t.params.apiName||f,r=e.create(o,e.Type.API);if(!r||!r.exists())return n();r.apply()}),page("(/)?:content",function(t,n){var o=t.params.content,r=e.create(o,e.Type.CONTENT);if(!r||!r.exists())return n();r.apply()})),page("(/)?",function(t,n){a()||setTimeout(function(){var o,r=i(t.querystring);if(s){if(r)return n();o=c}else l.log("Query-string:",r),o=r?e.fromQuery(r):c;if(!o||!o.exists())return n();o.isCurrent()||o.apply()},100)}),page("*",function(t){l.warn("Unknown Route:",t.path),e.create(null).apply()}),l.info("Docma SPA Configuration:"),l.info("App Title:          ",docma.app.title),l.info("Routing Method:     ",docma.app.routing.method),l.info("App Server:         ",docma.app.server),l.info("Base Path:          ",docma.app.base),l.info("Entrance Route ID:  ",docma.app.entrance),window.onload=function(){d=!0,c=e.fromID(docma.app.entrance),page.start({click:!0,popstate:!0,dispatch:!0,hashbang:!1,decodeURLComponents:!0}),l.info("Docma SPA loaded!")}}();
docma = Object.freeze(docma);